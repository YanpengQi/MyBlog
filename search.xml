<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Notes of Algorithm]]></title>
    <url>%2F2019%2F05%2F07%2F%5BNotes%5D%20Notes%20of%20Algorithm%20CS5800%2F</url>
    <content type="text"><![CDATA[Class 1 05/06/2019Fibonacci numbersFibonacci numbers (Exponential Algorithm)1234560, 1, 1, 2, 3, 5, 8, 13, 21a0, a1, a3, a3, a4, a5, a6, a7an = an-1 + an-2a0 = 0a1 = 1 Code123456fib1(int n) &#123; if (n == 0 || n == 1) &#123; return n; &#125; return fib1(n-1) + fib1(n-2);&#125; Time ComplexityAnswer O(2^n) Less intuitive, not like12for i in range(10): a[i] = a[i-1] + 2 Recursion Tree$ T(n) = \text {runtime of fib1(n)}$ 1234567 T(n) / \ T(n-1) T(n-2) / \ / \T(n-2) T(n-3) T(n-3) T(n-4) ......T(1) T(0) T(1) T(0) ... When hit 0 or 1, the recursion ends. 1234567891011 /\ / \ /____\ / / / _ / / _/ /_/left side = nright side = n/2T(n) = num of nodes in this recursion tree 12345in first half of this tree /\ / \ /____\num of nodes = 2^k-1 = 2 ^ (n/2) - 1 Thus we have $ 2 ^ {n/2} &lt;= T(n) &lt;= 2 ^ n $ Therefore $ 2 ^ {n/2} = (\sqrt {2}) ^ n ~= 1.4n $ Clearly, this is a bad time complexity algorithm. 123456789 T(n) / \ T(n-1) T(n-2) / \ / \ T(n-2) T(n-3) T(n-3) T(n-4)There are a lot of repetition in the process of calculation. e.g. T(n-2) T(n-3) Linear algorithmCode12345678fib2(int n) &#123; int[] A = new int[n]; A[0] = 0; A[1] = 1; for (int i = 2; i &lt;= n; i++) &#123; A[i] = A[i-1] + A[i-2]; &#125; return A[n];&#125; Time ComplexityLinear time: O(n) Constant space algorithmCode12345678fib2(int n) &#123; int[] A = new int[2]; A[0] = 0; A[1] = 1; for (int i = 2; i &lt;= n; i++) &#123; A[i%2] = A[(i-1)%2] + A[(i-2)%2]; &#125; return A[n%2];&#125; Analysis123i varies between 0 and 1A[1] = A[0] + A[1]A[0] = A[1] + A[0] Matrix solutionIdea$$ A = \left[ \begin{matrix} 1 &amp; 1 \ 1 &amp; 0 \end{matrix} \right]$$ $$ A^2 = \left[ \begin{matrix} 1 &amp; 1 \ 1 &amp; 0 \end{matrix} \right] * \left[ \begin{matrix} 1 &amp; 1 \ 1 &amp; 0 \end{matrix} \right] = \left[ \begin{matrix} 2 &amp; 1 \ 1 &amp; 1 \end{matrix} \right] = \left[ \begin{matrix} 1 &amp; 1 \ 1 &amp; 0 \end{matrix} \right]$$ 12345678910111213A = | 1 1 | = | a2 a1 | | 1 0 | | a1 a0 |A^2 = | 1 1 | | 1 1 | | 2 1 | | a3 a2 | | 1 0 | * | 1 0 | = | 1 1 | = | a2 a1 |A^3 = | 2 1 | | 1 1 | | 3 2 | | a4 a5 | | 1 1 | * | 1 0 | = | 2 1 | = | a3 a2 | ..... A^k = | a(k+1) ak | | ak ak-1 | Time ComplexityBasic: O(n) Optimized: O(logn) StrategySince we are dealing with A^n, the optimized time complexity of pow(x, n) is O(logn)1234A^n = |A(n/2)^2 | n is even |A((n-1)/2)^2 * A | n is oddA^64 = (A^32)^2 = ((A^16))^2^2 = A^(2^6) Asymptotic NotationComparison of each notation Compare Function Growth Compare Numbers f(n) = 5n g(n) = n^2 O &lt;= f(n) = O(g(n)) o &lt; f(n) = o(g(n) Θ = for f(n) = 100n and g(n) = n + 100 Ω &gt;= f(n) = Ω(g(n)) f(n) = Θ(g(n)) ω &gt;= f(n) = ω(g(n)) Mathematical Derivationf(n) = O(g(n))12iff exists constants C and n0s.t. when n &gt; n0, f(n) &lt;= C * g(n) 123lim(n-&gt;inf) f(n)/g(n) = 0 | fn = O/o(g(n)) constant | fn = O/Θ/Ω(g(n)) inf | fn = Ω/ω(g(n)) Practice:1234567891011121314151617181920lim(n-&gt;inf) (100n)/(n+100) = 100 fn = O/Θ/Ω(g(n))f(n) = nlgn g(n) = n^2f(n) = O/o(g(n))f(n) = 2^n g(n) = 3^nf(n) = O/o(g(n))lim(n-&gt;inf) f(n)/g(n) = lim(n-&gt;inf) (2/3)^n = 0f(n) = n+3 g(n) = 2 * sqrt(n)f(n) = Ω/ω(g(n))f(n) = log2(n) g(n) = log3(n)f(n) = Ω/ω/Θ(g(n))lim(n-&gt;inf) f(n)/g(n) = lim(n-&gt;inf) log2n/log3n = log3/log2f(n) = (logn)^2 g(n) = log(n^2) = 2lognf(n) = Ω/ω(g(n)) Master’s TheoremIdea of merge sortT(n) = 2T(n/2) + n 1234567 T(n) n | n / \ T(n/2) n/2 T(n/2) n/2 | n / \ / \T(n/4) T(n/4) T(n/4) T(n/4) | n ......T(1) T(1) T(1) T(1) ... | n Time Complexity of merge sortT(n) = height T(level) = logn n = nlogn Master’s Theorem1234567T(n) = a * T(n/b) + n^c, where a, b, c are constantsExamples:T(n) = 2 * T(n/2) + nT(n) = 8 * T(n/2) + n^2T(n) = T(n/2) + 1T(n) = T(n/3) + T(2n/3) + n (Not master&apos;s theorem) Now we have to compare logb(a) and c logb(a) &gt; c T(n) = Θ(n^(logb(a))) logb(a) = c T(n) = Θ((n^c) * logn) logb(a) &lt; c T(n) = Θ(n^c) Practice123456T(n) = T(n/2) + 1 T(n) = Θ(lgn)T(n) = 8T(n/2) + n^2 T(n) = Θ(n^3)T(n) = 7T(n/2) + n^2 T(n) = Θ(n^(log2(7)))T(n) = 4T(n/2) + n^2 T(n) = Θ(n^2 * (log2n))T(n) = T(n/2) + n T(n) = Θ(n)T(n) = T(n-1) + n (Not master&apos;s theorem) Draw the Recursion Tree of the last one12345678910111213Recursion Tree of T(n) = T(n-1) + n T(n) n T(n-1) n-1 T(n-2) n-2 ... T(1) 1T(n) = 1 + 2 + 3 + ... + n = n(n+1)/2Θ(n) = n^2 Other useful Summation Formula123451 + 2 + 3 + .. + n = n(n+1)/2q^0 + q^1 + q^2 + ... q^n = (q^(n+1) -1)/(q-1)1 + 1/2 + 1/3 + ... + 1/n = Θ(ln(n)) Normal caseT(n) = T(n/3) + T(2n/3) + n 1234567 T(n) n | n / \ T(n/3) n/3 T(2n/3) 2n/3 | n / \ / \T(n/9) T(2n/9) T(2n/9) T(4n/9) | n ......T(1) T(1) T(1) T(1) ... | n 1234567891011121314 /\ / \ /____\ \ \ \ \ \ \ \_\left side = log3nright side = log3/2(n)T(n) = num of nodes in this recursion treen * log3(n) &lt;= T(n) &lt;= n * log3/2(n) Time Complexity of Normal recursion treeT(n) = Θ(nlgn) Some examples123T(n) = T(n/4) + T(3n/4) + n T(n) = Θ(nlgn)T(n) = T(n/1000) + T(999n/1000) + n T(n) = Θ(nlgn)T(n) = T(n-1) + T(1) + n T(n) = Θ(n^2) Quick SortPartition12345678910Given array like|1 |9 |2 |8 |3 |8 |7 |5 |6 |Choose a pivot, put all num &lt; pivot in left, others in right| nums &lt;= pivot |pivot| nums &gt; pivot |The process is partition(A[], i, j) Code123456QuickSort(int[] A, int i, int j) &#123; if (i &gt;= j) &#123;return;&#125; int pivot_pos = Partition(A, i, j); QuickSort(A, i, pivot_pos-1); QuickSort(A, pivot_pos+1, j);&#125; Time Complexity123456T(n) = 2T(n/2) + n = Θ(nlogn)T(n) = T(n/3) + T(2n/3) + n = Θ(nlogn)T(n) = T(n/1000) + T(999n/1000) + n = Θ(nlogn)Worst CaseT(n) = T(n-1) + n = Θ(n^2) Average T(n) = Θ(nlogn) Worst T(n) = Θ(n^2) Code of Partition123456pivot = A[j]| i | ... | p | p+1 | ... | cur | ... | j |i - p: &lt;= pivotp - p+1: &gt; pivotcur: current pointer A[cur] &gt; pivot 1cur += 1 A[cur] &lt;= pivot 123swap(A[cur], A[p+1]);p += 1;cur += 1 123456789101112Partition(int[] A, int i, int j) &#123; int pivot = A[j]; int p = i - 1; for (int cur = i; cur &lt;= j-1; cur++) &#123; if (A[cur] &lt;= pivot) &#123; swap(A[cur], A[p+1]); p += 1; &#125; &#125; swap(A[j], A[p+1]); return p+1;&#125; Class 2 05/13/2019ReviewReview of quicksortStable Sort1234567| ... | 5(1) | ... | ... | 5(2) | ... |After sort| ... | 5(1)| 5(2) | ... |If two 5 are still in their relative positions, then this is a stable sort. Runtime of Quick SortRuntime: Average: $O(nlogn)$Worst: $O(n^2)$ The worst case is $T(n) = T(n-1) + n$ Pivot Selection Median of Three 1| i | ... | (i+j)/2 | ... | j | Heap SortTypes of Heap Max Heap Min Heap Operations (of Heap) Insert(E) $O(logn)$ getMax() $O(1)$ deleteMax() $O(logn)$ Operations (of Sorted Array) Insert(E) $O(n)$ getMax() $O(1)$ deleteMax() $O(1)$ Comparison of array and heapThe worst time of heap operation is logn. However, A sorted array takes On time to insert, which is the bottleneck of the overall time complexity. Logical View and Physical ViewLogical View123456789 7(1) / \ 3(2) 6(3) / \ / 1(4) 2(5) 5(6)Almost-Full Binary TreeParent must be &gt;= both children Physical View 123 1 2 3 4 5 6Array | 7 | 3 | 6 | 1 | 2 | 5 | helper functions of heapi is the index parent(i) = i / 2leftChild(i) = i 2rightChild = i 2+1 getMax() O(1)getMax() - return A[1] insert() O(logn)Case 1 1234567 7(1) / \ 3(2) 6(3) / \ / \ 1(4) 2(5) 5(6) 3(7)No need to adjust Case 2 1234567891011121314151617181920212223242526 7(1) / \ 3(2) 6(3) / \ / \ 1(4) 2(5) 5(6) 8(7)Swap 8 with 6 7(1) / \ 3(2) 8(3) / \ / \ 1(4) 2(5) 5(6) 6(7)Swap 7 with 8 8(1) / \ 3(2) 7(3) / \ / \ 1(4) 2(5) 5(6) 6(7) Complete inserting. 1 2 3 4 5 6 7Array(after insert) | 8 | 3 | 7 | 1 | 2 | 5 | 6| Code of insert()12345678910111213void insert(int e) &#123; // increase the size n of the heap n += 1; // insert the item to heap A A[n] = e; // Adjust from index i=n int i = n; // if cur node has a parent and the parent is smaller while (parent(i) &gt; 0 &amp;&amp; A[parent(i)] &lt; A[i]) &#123; swap(A[parent(i)], A[i]); i = parent(i); &#125;&#125; deleteMax()123456789101112131415161718192021222324252627282930 8(1) / \ 3(2) 7(3) / \ / \ 1(4) 2(5) 5(6) 6(7) Swap 6 with 8, and delete 8 6(1) / \ 3(2) 7(3) / \ / 1(4) 2(5) 5(6) 1 2 3 4 5 6 Array(after swap) | 6 | 3 | 7 | 1 | 2 | 5 | Swap 6 with 7 7(1) / \ 3(2) 6(3) / \ / 1(4) 2(5) 5(6) 1 2 3 4 5 6 Array(after swap) | 7 | 3 | 6 | 1 | 2 | 5 | Heap is balanced. deleteMax() completed. heapify()12345678910 6(1) / \ 3(2) 7(3) / \ / 1(4) 2(5) 5(6) The subTree of root 3 is a MaxHeapThe subTree of root 7 is a MaxHeapHowever, the tree of root 6 is not a MaxHeap.Now we need the heapify(). Code of heapify()1234567891011121314151617181920void heapify(int[] A, i) &#123; int largest = i; // Find the largest of cur root(i) and its children // if left child exists and left child is bigger than cur root if (leftChild(i) &lt;= n &amp;&amp; A[leftChild(i)] &gt; A[largest]) &#123; largest = leftChild(i); &#125; // if left child exists and left child is bigger than cur root if (rightChild(i) &lt;= n &amp;&amp; A[rightChild(i)] &gt; A[largest]) &#123; largest = rightChild(i); &#125; // check largest if (largest == i) return; // let the cur largest node be the root swap(A[i], A[largest]); // continue heapifying down the swapped node recursively heapify(A, largest);&#125; Code of deleteMax()12345678void deleteMax() &#123; // swap the cur root with the last node swap(A[1], A[n]); // delete the last node n -= 1; // heapify the whole heap heapify(A, 1);&#125; Heap SortMax Heap123456789 1 2 3 4 5 6 Array | 7 | 3 | 6 | 1 | 2 | 5 | Pretend we are deleting the max val.(deleteMax()) 1 2 3 4 5 || 6 Array(after deleted) | 5 | 3 | 6 | 1 | 2 || 7(max) |Now we get the biggest node in the tail of the array.continue sort the rest. Code of Heap Sort12345678910111213void heapSort(int[] A) &#123; for(int i = n; i &gt;= 1; i--) &#123; deleteHeap(A, 1, i); &#125;&#125;``` ### makeHeap()Solution 1 insert n times `O(nlogn)`Solution 2 6(1) / \ 3(2) 7(3) / \ / 1(4) 2(5) 5(6) n = 3 is the last non-trivil nodewe heapify the 7, 3, 6 nodes, where we ensure that all children are valid heap.12345678### Code of makeHeap()```Java// n/2 means the last non-trivil node in the heapfor (int i = n/2; i &gt;=1; i--) &#123; heapify(A, i);&#125; Example of heap sort1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980First, make this into a heap. 9(1) / \ 2(2) 6(3) / \ / 1(4) 4(5) 3(6) 1 2 3 4 5 6 Array | 9 | 2 | 6 | 1 | 4 | 3 | call makeHeap() on 6call makeHeap() on 2 9(1) / \ 4(2) 6(3) / \ / 1(4) 2(5) 3(6) 1 2 3 4 5 6 Array | 9 | 4 | 6 | 1 | 2 | 3 | call deleteHeap() on 9 3(1) / \ 4(2) 6(3) / \ 1(4) 2(5) 1 2 3 4 5 6 Array | 3 | 4 | 6 | 1 | 2 || 9 |call heapify() on 3 6(1) / \ 4(2) 3(3) / \ 1(4) 2(5) 1 2 3 4 5 6 Array | 6 | 4 | 3 | 1 | 2 || 9 |call deleteHeap() on 6 2(1) / \ 4(2) 3(3) / 1(4) 1 2 3 4 5 6 Array | 2 | 4 | 3 | 1 || 6 | 9 |call heapify() on 2 4(1) / \ 2(2) 3(3) / 1(4) 1 2 3 4 5 6 Array | 4 | 2 | 3 | 1 || 6 | 9 |call deleteHeap() on 4 1(1) / \ 2(2) 3(3) / 4(4) 1 2 3 4 5 6 Array | 1 | 2 | 3 || 4 | 6 | 9 |...The array is sorted. Sorting AlgorithmsTypes of sorting algorithms Algorithm Time Complexity Notes Quick Sort $O(nlogn)$ Merge Sort $O(nlogn)$ Heap Sort $O(nlogn)$ Bubble Sort $O(n^2)$ Insertion SOrt $O(n^2)$ Selection SOrt $O(n^2)$ Counting SOrt $O(n)$ Non-comparison based Radix SOrt $O(n)$ Non-comparison based Theorem of comparison based sorting algorithmComparison based sorting algorithm always run in $Ω(nlogn)$. Counting Sort123456789101112131415161718192021222324252627282930313233343536Assume we have array AThe input nums should satisfy 0 &lt;= A[i] &lt;= kinput A | 2 | 1 | 3 | 5 | 4 | 2 | 1 | 0 | 3 | 0 1 2 3 4 5bucket B | 1 | 2 | 2 | 2 | 1 | 1 | 0 1 2 3 4 5bucket B&apos; | 1 | 3 | 5 | 7 | 8 | 9 |output C | 0 | 1 | 1 | 2 | 2 | 3 | 3 | 4 | 5 |``` ### Code of Counting Sort```Java//Step of counting sort// fill the num in the bucketsfor (int i = 0; i &lt; n; i++) &#123; B[A[i]] += 1&#125;// indicates where the curr digit ends in the ouput arrayfor (int i = 0; i &lt;= k; i++) &#123; B[i] += B[i-1];&#125;// fill the digit into the arrayfor (int i = n-1; i &gt;= 0; i--) &#123; C[B[A[i]]] = A[i]; B[A[i]] -= 1;&#125;return C; problems of Counting SortQ: Why 0-based?A: To represent the case where the input has 0. Q: what happened if we have negative input?A: Map the input to the form we want. e.g. [-10, 10] -&gt; [0, 20] Q: Is this algorithm stable?A: In this case, yes. Analysis of Counting SortRun time: $O(n+k)$Space: $O(k)$ Radix SortIntroductionAlso known as digit sort. Only for positive base 10 integers. Example12345678910Use the counting sort to sort the colomn100 100 100 4 23 41 4 13123 512 512 23 512 23 013 41 4 =&gt; 123 =&gt; 23 =&gt; 100 13 13 123 123 41 4 41 512999 999 999 999 Analysisd is the number of digits, k is the range of the inputs(e.g. 32 bit integer)Run time: $O((n+k)d)$Space: e.g.123432-bit int| 8-bit | 8-bit | 8-bit | 8-bit | d = 4 times of counting sortk = 2^8 = 256 Class 3 05/20/2019Questions about Order StatisticsGiven a collection of integers, get the min/max value, median, 25% element, rth smallest element, etc. Question: How do we find the rth smallest element? Solution1 Sort the array sort array return A[k] The run time should be O(nlgn) Solution2 Based PartitionIdea123456789101112Definition 2| 1 | ... | start | ... | end | ... | 10 |A | 1 | 2 | 3 | 6 | 7 | 5 | 4 |pos = partition(A, 1, 7, 5)pos = 3if we get the 3 as the pivot position, which means we still have to find 2 more elementswe continue searching on kth(A, 4, 7, 2) Code1234567891011121314// definition 1int findKth(int[] A, int k) &#123; int pos = partition(A, 1, n); if (pos == k) return A[k]; if (pos &gt; k) return findKth(A, 1, pos); if (pos &lt; k) return findKth(A, pos+1, n);&#125;// definition 2// global index// rank of number with A[begin...end]int findKth(int[]A, int begin, int end, int k) &#123; &#125; Analysis$ T(n) = T(n/2) + n = O(n)$ 1234Example T(n) = T(2n/3) + n = O(n)T(n) = T(99n/100) + n = O(n)T(n) = T(n-1) + n = O(n^2) Find Top KSolution 1 Sort the array Sort the array return A[1:k] Time: $ O(nlogn) $ Solution 2 findKth algorithm partition return A[1:k] Time: $ O(n) $ Solution 3 Min Heap make a min heap delete k times Time: $O(n + klogn)$ (depends on which one’s bigger) Solution 4 Max Heap m make a max heap A[1:k] 12345for (i = k+1, ... , n) if(A[i] &lt; getMax()) &#123; deleteMax(); insert(A[i]); &#125; Time: $ O(k + (n-k)*logk)$When n is large, $ O(nlogk) $When k is large, $ O(k) $ Big Integer Multiplicationfor integers of 32-bit(unsigned), we have a range of $ (0, 2^{32}-1) $, which are 10 digits for integers of 64-bit(unsigned), we have a range of $ (0, 2^{64}-1) $, which are 10 digits RSAAn encryption algorithm using large integer multiplication. IdeaInput: 2 integers of n-bitsExample:123 1110 = 14* 0101 = 5 1000110 = 70 Time : $ O(n^2) $ Divide and Conquera can be split to | a1 | a2| for example,a = 1110 = $ 11 * 2^2 + 10 $ (Shift left by 2 bit) Therefore,$ a = a_12^{n/2} + a_2 $$ b = b_12^{n/2} + b_2 $$ a b = a_1b_12^{n} + (a_1b_2+a_2b_1)2^{n/2} + a_2b_2 $ We divide the 1 problem to 4 child problem. T(n) = 4T(n/2) + n(sum 2 n-bit integers) = O(n^2) Improve the running time$ p_1 = a_1b_1$$ p_2 = a_2b_2$$ p_3 = (a_1+a_2)(b_1+b_2)$$ a b = p_12^{n} + (p_3-p_1-p_2)2^{n/2} + p_2 $ We can save the Time to T(n) = 3T(n/2) + n$ T(n) = O(n^{log_2{3}}) $ Extra casesWhat if 2 integers are not with the same digits?Pad the 0’s to the nearest exponential of 2. 123For example110 -&gt; 011010010 -&gt; 00010010 Square Matrix MultiplicationIdeainput: 2 n*n matrices $ X = \left[ \begin{matrix} 1 &amp; 1 \ 1 &amp; 0 \end{matrix} \right]_{n*n}$ $Y = \left[ \begin{matrix} 1 &amp; 1 \ 1 &amp; 0 \end{matrix} \right]_{n*n}$ $ X*Y = O(n^3) $ Here we use the block of matrix to Divide &amp; Conquer $ X = \left[ \begin{matrix} 1 &amp; 1 \ 1 &amp; 0 \end{matrix} \right]_{n*n} = \left[ \begin{matrix} A &amp; B \ C &amp; D \end{matrix} \right]$ $Y = \left[ \begin{matrix} 1 &amp; 1 \ 1 &amp; 0 \end{matrix} \right]_{n*n} = \left[ \begin{matrix} E &amp; F \ G &amp; H \end{matrix} \right]$ $ XY = \left[ \begin{matrix} {AE+BG} &amp; {AF+BH} \ {CE+DG} &amp; {CF+DH} \end{matrix} \right]_{nn}$ Therefore, $ T(n) = 8T(\frac{n}{2}) + n^2 = O(n^3)$ Optimization$ XY = \left[ \begin{matrix} {AE+BG} &amp; {AF+BH} \ {CE+DG} &amp; {CF+DH} \end{matrix} \right]_{nn} = \left[ \begin{matrix} {Q} &amp; {R} \ {S} &amp; {T} \end{matrix} \right]$ $Assume:$$P_1 = A(F-H)$$P_2 = H(A+B)$$P_3 = E(C+D)$$P_4 = D(G-E)$$P_5 = (A+D)(E+H)$$P_6 = (B-D)(G+H)$$P_7 = (A-C)(E+F)$$Q = P_4 + P_5 - P_2 + P_6$$R = P_1 + P_2$$S = P_3 + P_4$$T = P_1 + P_5 - P_3 - P_7$ $ X*Y = \left[ \begin{matrix} {AE+BG} &amp; {AF+BH} \ {CE+DG} &amp; {CF+DH} \end{matrix} \right] = \left[ \begin{matrix} {P_4 + P_5 - P_2 + P_6} &amp; {P_1 + P_2} \ {P_3 + P_4} &amp; {P_1 + P_5 - P_3 - P_7} \end{matrix} \right]$ Therefore, $ T(n) = 7T(\frac{n}{2}) + n^2 = O(n^3)$, Successfully optimized. Counting InversionsIdea123456Inversion: if i &lt; j &amp;&amp; A[i] &gt; A[j], then (i, j) is an inversion.If my favorite list is [1, 2, 3], num of inversion is 0If list is [2, 1, 3], num of inversion is 1If list is [2, 3, 1], num of inversion is 2If list is [3, 2, 1], num of inversion is 3, we have a completely different taste Max num of inversions of a n list is $ C^{2}_{n} = O(n^2) $ Code123456789// Brute forceint count = 0;for (int i = 0; i &lt;=n; i++) &#123; for(int j = i+1; j &lt;=n; j++) &#123; if (A[i] &gt; A[j]) &#123; count++; &#125; &#125;&#125; Better Implementation12345678910111213141516 1 n/2 n/2+1 nA | x | y |num of cross inversions + x + y begin mid mid+1 endA | 1 3 5 | 0 2 6 | p qgiven A[p] = 1, A[q] = 0, A[p] &gt; A[q], we have inv += 3, q++A[p] &lt; A[q], p++A[q] &lt; A[p], inv += 2, q++A[p] &lt; A[q], p++A[p] &lt; A[q], p++, end Code1234567891011121314151617181920int CountInv(int[] A, int begin, int end) &#123; if (begin &gt;= end) return 0; int mid = (mid + end) / 2; int x = CountInv(A, begin, mid); int y = CountInv(A, mid+1, end); int z = CrossInv(A, begin, mid, end); return x + y + z;&#125;// o nlogn timeint CrossInv(int[] A, int begin, int mid, int end) &#123; sort(A, begin, mid); sort(A, mid+1, end); int p = begin, q = mid + 1, count = 0; while (p &lt;= mid &amp;&amp; q &lt;= end) &#123; if (A[p] &lt; A[q]) p++; else count += mid - p+1; &#125; return count;&#125; Analysis$ T(n) = 2T(\frac{n}{2}) + nlogn /= O(nlognlogn)$ Optimization1234567891011121314151617181920int CountInv(int[] A, int begin, int end) &#123; if (begin &gt;= end) return 0; int mid = (mid + end) / 2; int x = CountInv(A, begin, mid); // sort the left int y = CountInv(A, mid+1, end); // sort the right int z = CrossInv(A, begin, mid, end); // count the cross //merge left and right merge(A, begin, mid, end); return x + y + z;&#125;// on timeint CrossInv(int[] A, int begin, int mid, int end) &#123; int p = begin, q = mid + 1, count = 0; while (p &lt;= mid &amp;&amp; q &lt;= end) &#123; if (A[p] &lt; A[q]) p++; else count += mid - p+1; &#125; return count;&#125; $ T(n) = 2T(\frac{n}{2}) + n = O(nlogn)$ Example123456789 | 7 | 2 | 3 | 4 | 1 | 6 | 5 | 8 | | 2 | 3 | 4 | 7 | 1 | 6 | 5 | 8 | / \ 3 | 2 | 7 | 3 | 4 | | 1 | 6 | 5 | 8 | / \ / \ 1 0 | 7 | 2 | | 3 | 4 | | 1 | 6 | | 5 | 8 | Class 4 06/03/2019Binary Search Tree and HashtableDifference between two data structures Hashing BST O(1) h insert(key,value) O(1) h lookup(key) O(1) h delete(key) amartized running time O(logn) basically support traversing by ordered keys Binary Search TreeDefinition12345class Node &#123; int key; Node left; Node right;&#125; 12345678910111213 5 / \ 3 8 \ 4This is a BST 5 / \ 3 8 \ 6This is not a BST Left subtree is BST Right subtree is BST root.key &gt; all keys in left subtreeand root.key &lt; all keys in right subtree Tree Traversals Level-order Pre-order Post-order In-order Level-order Traversal12345678910void LevelOrder(Node root) &#123; Queue&lt;Node&gt; q = new LinkedList&lt;&gt;(); q.offer(root); while (!q.isEmpty()) &#123; Node cur = q.poll(); // processing on cur; print cur.key; if (cur.left != null) q.offer(cur.left); if (cur.right != null) q.offer(cur.right); &#125;&#125; Right Side View Question123456 5 / \ 3 8 \ 4we get the right side view as [5, 8, 4] 12345678910111213141516171819202122232425262728// we can just modify the original code bycur, curLevel = q.dequeue();res[cur_level] = cur.keyclass Solution &#123; // level order traversal // on time on space public List&lt;Integer&gt; rightSideView(TreeNode root) &#123; List&lt;Integer&gt; res = new LinkedList&lt;&gt;(); if (root == null) return res; LinkedList&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); queue.offerLast(root); int size = 1; while (!queue.isEmpty()) &#123; int temp=0; for (int i = 0; i &lt; size; i++) &#123; TreeNode cur = queue.pollFirst(); if (cur.left != null) queue.offerLast(cur.left); if (cur.right != null) queue.offerLast(cur.right); temp = cur.val; &#125; res.add(temp); size = queue.size(); &#125; return res; &#125;&#125; Pre-order Traversal123456void PreOrder(Node cur) &#123; if (cur == null) return; Process(cur); PreOrder(cur.left); PreOrder(cur.right);&#125; In-order Traversal123456 5 / \ 3 8 \ 4we get the inorder node list as [3, 4, 5, 8], which is sorted. Represent duplicate keys in BSTRequirementHas to support root &gt;= all left and root &lt; all right. MultiSet MultiMap 123456789101112131415161718 5 / \ 5 8 / 3 \ 4``` ### Implementation#### Lookup```javaboolean Lookup(Node cur, int key) &#123; if (cur == null) return false; if (cur.key == key) return true; if (cur.key &lt; key) return Lookup(cur.right, key); return Lookup(cur.left, key);&#125; Insert12345678910Node insert(Node cur, int key, String val) &#123; if (cur == null) return new Node(key, val); if (key == cur.key) cur.val = val; else if (key &lt; cur.key) &#123; cur.left = insert(cur.left, key, val); &#125; else &#123; cur.right = insert(cur.right, key, val); &#125; return cur;&#125; Delete 5 / \ 3 6 / \ 2 4 Delete 5(2 children) 4 / \ 3 6 / 2 Case 1: No childrenupdate parent’s reference Case 2: Single childParent pointing to child Case 2: two children find predecessor p swap delete recursively]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Google Bigtable]]></title>
    <url>%2F2019%2F05%2F03%2FGoogle%20Bigtable%2F</url>
    <content type="text"><![CDATA[Please comment one line (fmt.Fprintf(w, “Search received: %s %s %s”, lat, lon, ran)) as IOS does not like to get string. Make sure the response of \post is empty BigtableBigTable is one of the first NoSQL solutions in the world. It’s the same database that powers many core Google services, including Search, Analytics, Maps, and Gmail. Apache HBase is the open source version of BigTable. By definition, A Bigtable is a sparse, distributed, persistent multidimensional sorted map. (In my word, it’s a key­value store.) The map is indexed by a row key, column key, and a timestamp; each value in the map is an uninterpreted array of bytes. Main features that you must know about BigTable Map Persistent: BigTable vs. Memcache Distributed (GFS/HDFS, etc.): data is replicated across a number of participating nodes vs. MySQL Multidimensional: row, column (column family), timestamp. You may scan based on their ranges. Sparse: A given row can have any number of columns in each column family, or none atall. The other type of sparseness is row­based gaps, which merely means that there may be gaps between keys. BigTable vs. ElasticSearch vs. Datastore vs…. BigTable is persistent storage (ES is not persistent, may lose data) ElasticSearch is search engine with complicated query support and better readperformance BigQuery is for offline analysis not for serving user traffic (scale is small) MongoDB is NoSQL. BigTable vs. ElasticSearch vs. MongoDB vs. BigQuery vs. Dataflow BigTable = NoSQL + Cloud MongoDB = NoSQL ElasticSearch = NoSQL + Query Optimization BigQuery = MySQL­like + Cloud Dataflow = MapReduce + Cloud Interview question: Why you need BigTable (or BigQuery) while you already have ElasticSearch (BigTable/BigQuery) More readings http://chouqin.github.io/blog/2013/10/24/bigtable/ http://blog.csdn.net/opennaive/article/details/7532589 https://www.quora.com/What­problems­did­Spanner­solve­that­BigTable­fall­short­of Bigtable has a concept of column family and column. Column family is a set of columns. Question: Why column family?Answer: allow better management of data such as versioning strategy. Create BigTable in Google CloudClick this link https://cloud.google.com/bigtable/docs/quickstart­cbt and then click ‘ENABLE THE APIS’ To Enable an API.Open ‘BigTable’ in Google Cloud,Create an instance called ‘around­post’. Change instance type to development.Set the type to ssd and instance type to development Enter gcloud in your terminalInstall cbt in your cloud terminal (not your local terminal). When asked ‘Do you want to continue?’ Enter y. Proceed without waiting it to finish. 1234sudo gcloud components update sudo gcloud components install cbt``` To ensure cbt is installed, enter `which cbt` in your cloud terminal If you don’t see it, you cbt is not installed, please do the install again. /google/google-cloud-sdk/bin/cbt123In your cloud terminal, enter echo project = YOUR_PROJECT_ID &gt; ~/.cbtrc echo instance = around­post &gt;&gt; ~/.cbtrccbt createtable postcbt createfamily post postcbt createfamily post location12345678If you see such results, the bigtable column and column family are both created (This step is a MUST for next lessons). Please check it carefully.![6. Bigtable-2019-5-3-10-58-1.png](https://raw.githubusercontent.com/Luorinz/images/master/6.%20Bigtable-2019-5-3-10-58-1.png)## Write data into BigTable### Open your local terminal and cloud terminal, enter go get cloud.google.com/go/bigtable123456789101112131415161718192021222324252627282930313233Instructions on writing data to BigTable+ https://cloud.google.com/bigtable/docs/go/reference### Update your code in handlerPost and saveToBigTable. Replace project name with your project.```Gofunc saveToBigTable(p *Post, id string) &#123; ctx := context.Background() // you must update project name here bt_client, err := bigtable.NewClient(ctx, PROJECT_ID, BT_INSTANCE) if err != nil &#123; panic(err) return &#125; tbl := bt_client.Open(&quot;post&quot;) mut := bigtable.NewMutation() t := bigtable.Now() mut.Set(&quot;post&quot;, &quot;user&quot;, t, []byte(p.User)) mut.Set(&quot;post&quot;, &quot;message&quot;, t, []byte(p.Message)) mut.Set(&quot;location&quot;, &quot;lat&quot;, t, []byte(strconv.FormatFloat(p.Location.Lat, &apos;f&apos;, -1, 64))) mut.Set(&quot;location&quot;, &quot;lon&quot;, t, []byte(strconv.FormatFloat(p.Location.Lon, &apos;f&apos;, -1, 64))) err = tbl.Apply(ctx, id, mut) if err != nil &#123; panic(err) return &#125; fmt.Printf(&quot;Post is saved to Big Table : %s\n&quot;, p.Message)&#125; Based on what Google suggest, how to save our Post into BT?12345678tbl := client.Open("mytable")mut := bigtable.NewMutation()mut.Set("links", "maps.google.com", bigtable.Now(), []byte("1")) mut.Set("links", "golang.org", bigtable.Now(), []byte("1"))err := tbl.Apply(ctx, "com.google.cloud", mut) Uncomment the two lines in const and replace the PROJECT_ID with your own project id. 12345678const (INDEX = "around"TYPE = "post"DISTANCE = "200km"// Needs to update with your real project id PROJECT_ID = "xxxx"BT_INSTANCE = "around­post"// Needs to update this URL if you deploy it to cloud. ES_URL = "http://AWS_ADDRESS:9200") Add two imports 1234567891011package mainimport (elastic "gopkg.in/olivere/elastic.v3" "fmt""net/http""encoding/json""log""strconv""reflect""context" "cloud.google.com/go/bigtable" "github.com/pborman/uuid") Try to build it locally to see if there are any errors. 1go build *.go Update your codes in cloud terminal (Either copy or github) Offer shareAfter you copy or update codes into cloud terminal, do a deployment again.Open Postman, test post and searchRead data from BigTableIn the cloud terminal, enter1cbt read post You should be able to find all the entries stored in BT. How to debug? Check Logging­&gt;logs.Note that: if you close your cloud terminal, you may or may not need to install cbt again as cloud terminal is actually a vm. Things you need to know setup bigtable BigTable vs. ElasticSearch vs. MongoDB vs. BigQuery vs. Dataflow BigTable = NoSQL + Cloud MongoDB = NoSQL ElasticSearch = NoSQL + Query Optimization BigQuery = MySQL + Cloud Dataflow = MapReduce + Cloud]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Bigtable</tag>
        <tag>Web</tag>
        <tag>Cloud</tag>
        <tag>Go</tag>
        <tag>Database</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Authentication]]></title>
    <url>%2F2019%2F05%2F02%2FAuthentication%2F</url>
    <content type="text"><![CDATA[Credential based AuthenticationLogin each time when you need to operate something Cookie Based Authentication The traditional approach of authentication Stateful. This means that an authentication record or session must be kept both server and client-side. The server needs to keep track of active sessions in a database (memory/local store), while on the front-end a cookie is created that holds a session identifier, thus the name cookie based authentication. User enters their login credentials Server verifies the credentials are correct and creates a session which is then stored in a database A cookie with the session ID is placed in the users browser On subsequent requests, the session ID is verified against the database and if valid the request processed Once a user logs out of the app, the session is destroyed both client and server side Question: what’s the problem of this method? Imagine when you need to replace your ID? Go to government, apply for a temporary ID. It may take them 1 months to send you a new ID. During this period, you may use your temporary ID for some purposes. Token-Based Authentication More and more popular (Yelp API, etc.) Usually JSON Web Tokens (JWTs). How it works User enters their login credentials (=username + password) Server verifies the credentials are correct and returns an encrypted and signed token with a private key. Text: (JSON = {username: “abcd”, uuid=”1.2.3.4”}, private key) =&gt; token Code: abccdeedddee Decode: JSON = {username: “abcd”, uuid=”1.2.3.4”} Symmetric vs Asymmetric encryption. This token is stored client-side, most commonly in local storage - but can be stored in session storage or a cookie as well Subsequent requests to the server include this token as an additional Authorization header or through one of the other methods mentioned above The server decodes the JWT and if the token is valid processes the request Once a user logs out, the token is destroyed client-side, no interaction with the server is necessary Encryption using asymmetric keys. Sign using asymmetric keys: More reading (symmetric vs asymmetric encryption):https://www.ssl2buy.com/wiki/symmetric-vs-asymmetric-encryption-what-are-differences Advantages of Token-Based AuthenticationStateless, Scalable and Decoupled Stateless: The back-end does not need to keep a record of tokens. Self-contained, containing all the data required to check its validity.. No DB look up is needed. Store Data in the JWT With a cookie based approach, you simply store the session id in a cookie. JWT’s on the other hand allow you to store any type of metadata, as long as it’s valid JSON. (username in our project, for example) Mobile Friendly Native mobile platforms and cookies do not mix well. In our project, the same Go backend will serve traffic to both iOS and browser (React JS)Disadvantages of Token-Based Authentication Usually the size of token is larger than a session id. Auth0 and GolangSource of codes: https://auth0.com/blog/authentication-in-golang/ JWT = JSON Web Toolkit use jwt to protect post and search endpoints (reject if without auth token)123456789101112131415161718192021222324252627282930313233343536package mainimport ( // new libs "github.com/auth0/go-jwt-middleware" "github.com/dgrijalva/jwt-go" "github.com/gorilla/mux")// Other codesvar mySigningKey = []byte("secret")func main() &#123; // Create a client client, err := elastic.NewClient(elastic.SetURL(ES_URL), elastic.SetSniff(false)) …. fmt.Println("Started service successfully") // Here we are instantiating the gorilla/mux router r := mux.NewRouter() var jwtMiddleware = jwtmiddleware.New(jwtmiddleware.Options&#123; ValidationKeyGetter: func(token *jwt.Token) (interface&#123;&#125;, error) &#123; return mySigningKey, nil &#125;, SigningMethod: jwt.SigningMethodHS256, &#125;) r.Handle("/post", jwtMiddleware.Handler(http.HandlerFunc(handlerPost))).Methods("POST") r.Handle("/search", jwtMiddleware.Handler(http.HandlerFunc(handlerSearch))).Methods("GET") r.Handle("/login", http.HandlerFunc(loginHandler)).Methods("POST") r.Handle("/signup", http.HandlerFunc(signupHandler)).Methods("POST") http.Handle("/", r) log.Fatal(http.ListenAndServe(":8080", nil))&#125; Let’s explain these codes line by line 1r := mux.NewRouter() Create a new router on top of the existing http router as we need to check auth. 123456var jwtMiddleware = jwtmiddleware.New(jwtmiddleware.Options&#123; ValidationKeyGetter: func(token *jwt.Token) (interface&#123;&#125;, error) &#123; return mySigningKey, nil &#125;, SigningMethod: jwt.SigningMethodHS256, &#125;) Create a new JWT middleware with a Option that uses the key ‘mySigningKey’ such that we know this token is from our server. The signing method is the default HS256 algorithm such that data is encrypted. 1r.Handle("/post", jwtMiddleware.Handler(http.HandlerFunc(handlerPost))).Methods("POST") It means we use jwt middleware to manage these endpoints and if they don’t have valid token, we will reject them. First handle the jwt, then chandle the normal http request Question: if we reject it, what HttpResponse code we should return?https://golang.org/src/net/http/status.go Install new packages123go get &quot;github.com/auth0/go-jwt-middleware&quot;go get &quot;github.com/dgrijalva/jwt-go&quot;go get &quot;github.com/gorilla/mux&quot; Under the same folder, add a new file called user.go1234567891011121314151617181920212223242526272829package mainimport ( elastic "gopkg.in/olivere/elastic.v3" "encoding/json" "fmt" "net/http" "reflect" "regexp" "time" "github.com/dgrijalva/jwt-go")const ( TYPE_USER = "user")var ( usernamePattern = regexp.MustCompile(`^[a-z0-9_]+$`).MatchString)type User struct &#123; Username string `json:"username"` Password string `json:"password"` Age int `json:"age"` Gender string `json:"gender"`&#125; Implement checkUser method in user.go.What does this method do? We need to check whether a pair of username and password is stored in ES. 12345678910111213141516171819202122232425262728// checkUser checks whether user is validfunc checkUser(username, password string) bool &#123; es_client, err := elastic.NewClient(elastic.SetURL(ES_URL), elastic.SetSniff(false)) if err != nil &#123; fmt.Printf("ES is not setup %v\n", err) return false &#125; // Search with a term query termQuery := elastic.NewTermQuery("username", username) queryResult, err := es_client.Search(). Index(INDEX). Query(termQuery). Pretty(true). Do() if err != nil &#123; fmt.Printf("ES query failed %v\n", err) return false &#125; var tyu User for _, item := range queryResult.Each(reflect.TypeOf(tyu)) &#123; u := item.(User) return u.Password == password &amp;&amp; u.Username == username &#125; // If no user exist, return false. return false&#125; Implement addUser method.Student question After we send the term query, how do we know whether this user has existed? How to insert this user into ES? 1234567891011121314151617181920212223242526272829303132333435363738// Add a new user. Return true if successfully.func addUser(user User) bool &#123; es_client, err := elastic.NewClient(elastic.SetURL(ES_URL), elastic.SetSniff(false)) if err != nil &#123; fmt.Printf("ES is not setup %v\n", err) return false &#125; termQuery := elastic.NewTermQuery("username", user.Username) queryResult, err := es_client.Search(). Index(INDEX). Query(termQuery). Pretty(true). Do() if err != nil &#123; fmt.Printf("ES query failed %v\n", err) return false &#125; if queryResult.TotalHits() &gt; 0 &#123; fmt.Printf("User %s already exists, cannot create duplicate user.\n", user.Username) return false &#125; _, err = es_client.Index(). Index(INDEX). Type(TYPE_USER). Id(user.Username). BodyJson(user). Refresh(true). Do() if err != nil &#123; fmt.Printf("ES save user failed %v\n", err) return false &#125; return true&#125; Implement signupHandler method.Student question: finish this method to support Decode a user from request (POST) Check whether username and password are empty, if any of them is empty, call http.Error(w, &quot;Empty password or username&quot;, http.StatusInternalServerError) Otherwise, call addUser, if true, return a message “User added successfully” If else, call http.Error(w, “Failed to add a new user”, http.StatusInternalServerError) Set header to be w.Header().Set(“Content-Type”, “text/plain”) w.Header().Set(“Access-Control-Allow-Origin”, “*”) 123456789101112131415161718192021222324252627// If signup is successful, a new session is created.func signupHandler(w http.ResponseWriter, r *http.Request) &#123; fmt.Println("Received one signup request") decoder := json.NewDecoder(r.Body) var u User if err := decoder.Decode(&amp;u); err != nil &#123; panic(err) return &#125; if u.Username != "" &amp;&amp; u.Password != "" &amp;&amp; usernamePattern(u.Username) &#123; if addUser(u) &#123; fmt.Println("User added successfully.") w.Write([]byte("User added successfully.")) &#125; else &#123; fmt.Println("Failed to add a new user.") http.Error(w, "Failed to add a new user", http.StatusInternalServerError) &#125; &#125; else &#123; fmt.Println("Empty password or username.") http.Error(w, "Empty password or username", http.StatusInternalServerError) &#125; w.Header().Set("Content-Type", "text/plain") w.Header().Set("Access-Control-Allow-Origin", "*")&#125; Implement loginHandler12345678910111213141516171819202122232425262728293031// If login is successful, a new token is created.func loginHandler(w http.ResponseWriter, r *http.Request) &#123; fmt.Println("Received one login request") decoder := json.NewDecoder(r.Body) var u User if err := decoder.Decode(&amp;u); err != nil &#123; panic(err) return &#125; if checkUser(u.Username, u.Password) &#123; token := jwt.New(jwt.SigningMethodHS256) claims := token.Claims.(jwt.MapClaims) /* Set token claims */ claims["username"] = u.Username claims["exp"] = time.Now().Add(time.Hour * 24).Unix() /* Sign the token with our secret */ tokenString, _ := token.SignedString(mySigningKey) /* Finally, write the token to the browser window */ w.Write([]byte(tokenString)) &#125; else &#123; fmt.Println("Invalid password or username.") http.Error(w, "Invalid password or username", http.StatusForbidden) &#125; w.Header().Set("Content-Type", "text/plain") w.Header().Set("Access-Control-Allow-Origin", "*")&#125; Let’s explain the codes 123456decoder := json.NewDecoder(r.Body) var u User if err := decoder.Decode(&amp;u); err != nil &#123; panic(err) return &#125; Decode a user from request’s body1if checkUser(u.Username, u.Password) &#123; Make sure user credential is correct. 1token := jwt.New(jwt.SigningMethodHS256) Create a new token object to store. 1claims := token.Claims.(jwt.MapClaims) Convert it into a map for lookup 12claims["username"] = u.Usernameclaims["exp"] = time.Now().Add(time.Hour * 24).Unix() Store username and expiration into it. 1tokenString, _ := token.SignedString(mySigningKey) Sign (Encrypt) and token such that only server knows it. 1w.Write([]byte(tokenString)) Write it into response Update handlerPost in main.go to populate usernameQuestion: why use the username in context? Why not ask user to send it as param? Answer: 1234567891011121314151617181920212223242526func handlerPost(w http.ResponseWriter, r *http.Request) &#123; // other codes user := r.Context().Value("user") claims := user.(*jwt.Token).Claims username := claims.(jwt.MapClaims)["username"] // 32 &lt;&lt; 20 is the maxMemory param for ParseMultipartForm // After you call ParseMultipartForm, the file will be saved in the server memory with maxMemory size. // If the file size is larger than maxMemory, the rest of the data will be saved in a system temporary file. r.ParseMultipartForm(32 &lt;&lt; 20) // Parse from form data. fmt.Printf("Received one post request %s\n", r.FormValue("message")) lat, _ := strconv.ParseFloat(r.FormValue("lat"), 64) lon, _ := strconv.ParseFloat(r.FormValue("lon"), 64) p := &amp;Post&#123; User: username.(string), Message: r.FormValue("message"), Location: Location&#123; Lat: lat, Lon: lon, &#125;, &#125; ...&#125; TestLocal testIn the same folder where you have main.go and user.go1go run *.go In windows, execute go run main.go users.go Open Postman and enter ‘http://localhost:8080/signup’ in the url, in the Body add a new json object as123456&#123; "username":"jack", "password":"ABCD", "age":16, "gender":"female"&#125; Click Send and you should see a message like ‘User added successfully’. Change the url to be ‘http://localhost:8080/login’, and in the body use the same json object.It will return a token as response copy it Postchange the url to ‘http://localhost:8080/post’ and then in the header add a new key value with a key as ‘Authorization’ and a value as ‘Bearer YOUR_TOKEN’. In the body, still add related input params and an image file. bearer is also fine Click Send and make it works. 在这里elastic search默认只显示10条结果，需要在search handler那里修改一下结果数量。 Searchchange the url to ‘http://localhost:8080/search?lat=37.5&amp;lon=-120.5&amp;range=200’ and the method to be GET. Then in the Headers, similarly, add a new Authorization key value pair if not there. Click send and you should get the same results as last time.You can also verify the signed content on:https://jwt.io/ Remote test (Homework)Deploy a new instance in GCloud and then test it again REMEMBER: Install new packages on Google Cloud Shell!Note: some new package may need to be installed on Google cloud shell: 123go get github.com/googleapis/gax-gogo get google.golang.org/api/googleapigo get go.opencensus.io/trace Homework Try to send some random string and see what’s the response Why we don’t protect the two endpoints of ‘login’ and ‘signup’? How to protect credentials from man-in-the-middle attack?]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Cloud</tag>
        <tag>Go</tag>
        <tag>GAE</tag>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Google Cloud Storage]]></title>
    <url>%2F2019%2F04%2F30%2FGoogle%20Cloud%20Storage%2F</url>
    <content type="text"><![CDATA[Google Cloud Storage (GCS)Question: we have so many storage, why we still need GCS (Google Cloud Storage)? Answer: to store unstructured data (file, image, video, etc.) and implement CDN. BigTable, BigQuery, ElasticSearch are all for structured data. Definition: A Powerful, Simple and Cost Effective Object Storage Service.Think it as Google Drive, Dropbox, Amazon S3. FeaturesDurable Google Cloud Storage is designed for 99.999999999% durability. It stores data redundantly, with automatic checksums to ensure data integrity. With Multi-Regional storage, your data is maintained in geographically distinct locations.Available All storage classes offer very high availability around the world.ScalableInexpensive Good to store unstructured data like image, file, video, etc. Content Delivery Network (CDN)A content delivery network or content distribution network (CDN) is a geographically distributed network of proxy servers and their data centers. CDN, offers an efficient, cost-effective way of reducing both network I/O costs and content delivery latency for regularly accessed website assets. A CDN can be understood as group of geographically distributed caches, with each cache locaœted in one of several global points of presence. Traditional server vs. CDNCompanies like Akamai, Cloudflare, etc. GCS BucketFirst of all, we will need a gcs bucket. Why we need this bucket? It’s like a folder which we can have files (images/videos posted from user) in it. Bucket == Folder. Open your console.cloud.google.com and choose Storage -&gt; Browser. Then click ‘CREATE BUCKET’ to create a new bucket. Pick a name for it, starts with post-images-, and the suffix is your project ID to avoid any conflict with other users. If used by others, add a random number. For example, I use post-images-75015 while yours will be different. Please remember this bucket name and we will use it later. When asked about ‘Default storage class’, Regional is ok as our servers (GAE flex) are in us-central-, so we may put this bucket in us-central- too. Click ‘save’ to save your changes. Multi part FormA HTTP multipart request is a HTTP request that HTTP clients construct to send files and data over to a HTTP Server. It is commonly used by browsers and HTTP clients to upload files to the server. The content type “application/x-www-form-urlencoded“ is inefficient for sending large quantities of binary data or text containing non-ASCII characters. The content type “multipart/form-data“ should be used for submitting forms that contain files, non-ASCII data, and binary data. How to send multipart request in Postman? How does it look like? How to parse multipart form in Go? 1func (r *Request) ParseMultipartForm(maxMemory int64) error https://golang.org/pkg/net/http/#Request.ParseMultipartForm https://github.com/golang-samples/http/blob/master/fileupload/main.go 1234567891011121314151617181920212223242526272829303132333435363738394041package mainimport ( "fmt" "io/ioutil" "log" "net/http" "os")// 1MBconst MAX_MEMORY = 1 * 1024 * 1024func upload(w http.ResponseWriter, r *http.Request) &#123; if err := r.ParseMultipartForm(MAX_MEMORY); err != nil &#123; log.Println(err) http.Error(w, err.Error(), http.StatusForbidden) &#125; for key, value := range r.MultipartForm.Value &#123; fmt.Fprintf(w, "%s:%s ", key, value) log.Printf("%s:%s", key, value) &#125; for _, fileHeaders := range r.MultipartForm.File &#123; for _, fileHeader := range fileHeaders &#123; file, _ := fileHeader.Open() path := fmt.Sprintf("files/%s", fileHeader.Filename) buf, _ := ioutil.ReadAll(file) ioutil.WriteFile(path, buf, os.ModePerm) &#125; &#125;&#125;func main() &#123; http.HandleFunc("/upload", upload) http.Handle("/", http.FileServer(http.Dir("static"))) log.Fatal(http.ListenAndServe(":8080", nil))&#125; Code changesQuestion: Why we need GCS in this project?Answer: to save the image uploaded from user and serve it. Update handlerPost to support save image into GCS 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586import ( "context" "cloud.google.com/go/storage" // other libs)const ( INDEX = "around" TYPE = "post" DISTANCE = "200km" PROJECT_ID = "around-75015" BT_INSTANCE = "around-post" // other configs // Needs to update this bucket based on your gcs bucket name. BUCKET_NAME = "post-images-75015")type Post struct &#123; // `json:"user"` is for the json parsing of this User field. Otherwise, by default it's 'User'. User string `json:"user"` Message string `json:"message"` Location Location `json:"location"` Url string `json:"url"`&#125;...func handlerPost(w http.ResponseWriter, r *http.Request) &#123; // Other codes w.Header().Set("Content-Type", "application/json") w.Header().Set("Access-Control-Allow-Origin", "*") w.Header().Set("Access-Control-Allow-Headers", "Content-Type,Authorization") // 32 &lt;&lt; 20 is the maxMemory param for ParseMultipartForm, equals to 32MB (1MB = 1024 * 1024 bytes = 2^20 bytes) // After you call ParseMultipartForm, the file will be saved in the server memory with maxMemory size. // If the file size is larger than maxMemory, the rest of the data will be saved in a system temporary file. r.ParseMultipartForm(32 &lt;&lt; 20) // Parse from form data. fmt.Printf("Received one post request %s\n", r.FormValue("message")) lat, _ := strconv.ParseFloat(r.FormValue("lat"), 64) lon, _ := strconv.ParseFloat(r.FormValue("lon"), 64) p := &amp;Post&#123; User: "1111", Message: r.FormValue("message"), Location: Location&#123; Lat: lat, Lon: lon, &#125;, &#125; id := uuid.New() file, _, err := r.FormFile("image") if err != nil &#123; http.Error(w, "Image is not available", http.StatusInternalServerError) fmt.Printf("Image is not available %v.\n", err) return &#125; defer file.Close() ctx := context.Background() // replace it with your real bucket name. _, attrs, err := saveToGCS(ctx, file, BUCKET_NAME, id) if err != nil &#123; http.Error(w, "GCS is not setup", http.StatusInternalServerError) fmt.Printf("GCS is not setup %v\n", err) return &#125; // Update the media link after saving to GCS. p.Url = attrs.MediaLink // Save to ES. saveToES(p, id) // Save to BigTable. //saveToBigTable(p, id)&#125;func saveToGCS(ctx context.Context, r io.Reader, bucketName, name string) (*storage.ObjectHandle, *storage.ObjectAttrs, error) &#123; // Student questions&#125; Implement saveToGCS.Google has provided a good example of writing objects to GCS. https://cloud.google.com/storage/docs/reference/libraries#client-libraries-install-go Google example of open a client connection to GCS 123456789101112131415161718192021222324252627282930313233343536package mainimport ( "fmt" "log" // Imports the Google Cloud Storage client package. "cloud.google.com/go/storage" "golang.org/x/net/context")func main() &#123; ctx := context.Background() // Sets your Google Cloud Platform project ID. projectID := "YOUR_PROJECT_ID" // Creates a client. client, err := storage.NewClient(ctx) if err != nil &#123; log.Fatalf("Failed to create client: %v", err) &#125; // Sets the name for the new bucket. bucketName := "my-new-bucket" // Creates a Bucket instance. bucket := client.Bucket(bucketName) // Creates the new bucket. if err := bucket.Create(ctx, projectID, nil); err != nil &#123; log.Fatalf("Failed to create bucket: %v", err) &#125; fmt.Printf("Bucket %v created.\n", bucketName)&#125; Google example of writing an object to GCS (copied from https://github.com/GoogleCloudPlatform/golang-samples/blob/master/storage/objects/main.go) 12345678910111213141516171819func write(client *storage.Client, bucket, object string) error &#123; ctx := context.Background() // [START upload_file] f, err := os.Open("notes.txt") if err != nil &#123; return err &#125; defer f.Close() wc := client.Bucket(bucket).Object(object).NewWriter(ctx) if _, err = io.Copy(wc, f); err != nil &#123; return err &#125; if err := wc.Close(); err != nil &#123; return err &#125; // [END upload_file] return nil&#125; Answer: 1234567891011121314151617181920212223242526272829303132// Save an image to GCS.func saveToGCS(ctx context.Context, r io.Reader, bucketName, name string) (*storage.ObjectHandle, *storage.ObjectAttrs, error) &#123; client, err := storage.NewClient(ctx) if err != nil &#123; return nil, nil, err &#125; defer client.Close() bucket := client.Bucket(bucketName) // Next check if the bucket exists if _, err = bucket.Attrs(ctx); err != nil &#123; return nil, nil, err &#125; obj := bucket.Object(name) w := obj.NewWriter(ctx) if _, err := io.Copy(w, r); err != nil &#123; return nil, nil, err &#125; if err := w.Close(); err != nil &#123; return nil, nil, err &#125; if err := obj.ACL().Set(ctx, storage.AllUsers, storage.RoleReader); err != nil &#123; return nil, nil, err &#125; attrs, err := obj.Attrs(ctx) fmt.Printf("Post is saved to GCS: %s\n", attrs.MediaLink) return obj, attrs, err&#125; Remember to install package: go get -u cloud.google.com/go/storage 这里遇到了迷之bug error: elastic: Error 400 (Bad Request): failed to parse [type=mapper_parsing_exception] 问题出在postman上面， 重新开个post或者试试把url的类型改成plain text TestLocal test (on your own computer)cd to the folder where you have main.go1go run main.go Open your Postman, change the method to POST, in the url enter ‘http://localhost:8080/post’ In the Body part, choose form-data, and then enter lat, lon, message and image. For image, the type is ‘file’ such that you may upload an image from your local storage. Verify the search API is workingOpen Postman, change the method to GET, in the url change it to ‘http://localhost:8080/search?lat=37.5&amp;lon=-120.5&amp;range=200’ Copy the url into your browser and download the image to verify that it’s the same image that you’ve downloaded. If you have any auth issue, try 1gcloud auth application-default login If you have permission problem, try 1sudo chown -R $(whoami):staff ~/.config/gcloud/ Integration test (TBD)Remote test (homework)Commit your changes to github and then open a new cloud terminal. Check out from github1git pull origin master cd to your folder with main.go and app.yaml1gcloud app deploy Wait until the deployment is done Open Postman.Instead of using ‘http://localhost:8080’ change it to your service url (without port) For example, ‘http://around-179500.appspot.com/post’ and ‘http://around-179500.appspot.com/search?lat=37.5&amp;lon=-120.5&amp;range=200’ The others are the same Corscross-origin sharing standard Pre-flight requests: You may have a content type like JSON, or some other custom header that’s triggering a pre-flight request, which your server may not be handling. Try adding this one, if you’re using the ever-common AJAX in your front-end: https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Requested-WithGorilla’s handlers.CORS() will set sane defaults to get the basics of CORS working for you; however, you can (and maybe should) take control in a more functional manner.https://stackoverflow.com/questions/40985920/making-golang-gorilla-cors-handler-work (Optional) Vim go plugin:https://github.com/fatih/vim-go Spam and Abuse DetectionAny user-facing IT company has to address the Spam and Abuse problem in production. Question: Why our project needs to think about spam problem? Answer:Categories of Spam and Abuse in IndustryRacy/Nudity (Child Porn especially) Harassment or Hate Speech (n* word, etc.) Fake News (Facebook) Keyword Spam (Keyword stuffing) Drug Abuse Violence or Bully Spam Copycat (IP Infringement) Phishing (CEO Phishing for SSN) Privacy LeakSolutions Keyword based (rule based) n words, s words, f* words, etc. Machine Learning Model (images and videos) Open NSFW model Geo location based Strip clubs, etc. User based User ban User warning Aggregated user signals User feedback report Machine Learning Moderators External channels Internal users like employees Media coverage Others Question:In our current design, we kind of spam filters we may enforce? Answer: For example, keyword based spam filter]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Cloud</tag>
        <tag>Go</tag>
        <tag>GAE</tag>
        <tag>GCS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GAE Basic]]></title>
    <url>%2F2019%2F04%2F29%2FGAE%20Basic%2F</url>
    <content type="text"><![CDATA[Google Cloud PlatformGAE (Google App Engine)Google App Engine is a cloud computing platform for developing and hosting web applications in Google-managed data centers. GCE (Google Compute Engine)Google Compute Engine delivers virtual machines running in Google’s innovative data centers and worldwide fiber network. GKE (Google Container Engine)https://cloud.google.com/containers/ DataflowDataflow is a unified programming model and a managed service for developing and executing a wide range of data processing patterns including ETL, batch computation, and continuous computation. BigTableCloud Bigtable is Google’s NoSQL Big Data database service. It’s the same database that powers many core Google services, including Search, Analytics, Maps, and Gmail. BigQueryBigQuery is Google’s fully managed, petabyte scale, low cost enterprise data warehouse for analytics. Others PubSub Datastore Storage Monitoring What is a typical BigData project (web+analysis) Service (GAE/GKE) to receive user generated contents Datastore (BigTable/Spanner) to save contents Index (ElasticSearch) to query contents in runtime Service (GAE/GKE) to serve contents in runtime Dataflow (MapReduce) to dump data into BigQuery BigQuery (SQL) to perform further analysis GKE is more like a simple GCE Google App Engine FlexApp Engine flexible environment automatically scales your app up and down while balancing the load. Microservices, authorization, SQL and NoSQL databases, traffic splitting, logging. Step 3.1.1 In your Intellij, create a new file called app.yaml The content has just two lines. GAE 通过flex实现负载均衡 12runtime: goenv: flex Recommended: upload your two files (main.go and app.yaml) into github. Worst cast: just copy and paste in terminals. More readings Overview https://cloud.google.com/docs/overview/ Flex in GAE https://cloud.google.com/appengine/docs/flexible/ GAE on Golang https://cloud.google.com/appengine/docs/go/ GAE in go: https://cloud.google.com/appengine/docs/flexible/go/quickstart Setup cloud terminal.Question: Why use cloud terminal?Answer: Such that we do not rely on the local environment (Windows vs. Mac). Click ‘Activate Google Cloud Shell’. Wait until the init is doneThen you will see a vm available for you to play. This is similar to the EC2 vm. Install go libraries in gcloud terminal.12go get gopkg.in/olivere/elastic.v3go get github.com/pborman/uuid (Recommended) Checkout your codes from githubgit clone https://github.com/Luorinz/Around.git Question: what’s the purpose of app.yaml? Answer: to tell google that your program is a go program and use go compiler to run it. Then enter this line of code to make sure you copy past is done. 1cat main.go | head -n 5 You’re expected to see this12345package mainimport ( elastic &quot;gopkg.in/olivere/elastic.v3&quot; &quot;fmt&quot; Enter gcloud app deployWhen asked about site, enter 1, which is us-west2 When asked Y/n, enter Y. The deployment may take more than 10 minutes to finish (next deployment will be faster). Error: If you have error like this, you may have a wrong ES_URL. Update the value and deploy again. 12345Updating service [default]...failed. ERROR: (gcloud.app.deploy) Error Response: [9] Application startup error:+ exec apppanic: no Elasticsearch node available Open Postman, find the post query from history.(POST, url=http://xxx.appspot.com/post) Replace xxx with your real project id 12345678&#123; "user":"1111", "message":"一生必去的100个地方", "location":&#123; "lat":37.5, "lon":-120.1 &#125;&#125; And then find the get query from history. (GET, url=http://around-xxxx.appspot.com/search?lat=37.5&amp;lon=-120)You should get the results back 12345678910[ &#123; "user": "1111", "message": "一生必去的100个地方", "location": &#123; "lat": 37.5, "lon": -120.1 &#125; &#125;] Play with more examples. If you do not have any results back, try to change your lat or lon to make sure it’s within 200km. Check the logging to see if there is any error messageChoose SATCKDRIVER -&gt; Logging -&gt; Logs (Optional) Stop Instance to save credit.(Optional) Start the instance again. In the same page, choose one instance and click START. If the START is disabled, refresh it or wait a minute.(Optional) How to filter word123456789101112func containsFilteredWords(s *string) bool &#123; filteredWords := []string&#123; "fuck", "100", &#125; for _, word := range filteredWords &#123; if strings.Contains(*s, word) &#123; return true &#125; &#125; return false&#125; Update relevant part from your code 12345678910111213141516func handlerSearch(w http.ResponseWriter, r *http.Request) &#123; ... for _, item := range searchResult.Each(reflect.TypeOf(typ)) &#123; p := item.(Post) fmt.Printf("Post by %s: %s at lat %v and lon %v\n", p.User, p.Message, p.Location.Lat, p.Location.Lon) // TODO(vincent): Perform filtering based on keywords such as web spam etc. if !containsFilteredWords(&amp;p.Message) &#123; ps = append(ps, p) &#125; &#125; ...&#125; Related string operationshttps://golang.org/pkg/strings/ (Optional) Useful Go informationError vs Panic Error: normal way to handle error status. Panic: normally used when some “impossible” situation happens with no intend recover. Use “recover” to handle when exiting function. recover is like catch “defer” clause Preferred way to recycle resources E.g. file handles, network connections, etc. Defer executes after return First come last executes Example 1234567891011121314func Foo() &#123; var f File if f, err = os.Open(“Somefile”); err != nil &#123; panic(“Error open file”) &#125; defer f.Close() ... // some other error happens if err != nil &#123; panic(“Unexpected error”) &#125;&#125; Combined with recover to handle panic 1234567891011121314151617181920212223242526272829303132func Foo() result string, err error &#123; type openFileError struct&#123;&#125; type unexpectedError struct&#123;&#125; defer func() &#123; switch p := recover(); p &#123; case nil: // no panic case openFileError&#123;&#125;: err = fmt.Errorf(“Open file error”) case unexpectedError&#123;&#125;: err = fmt.Errorf(“Unexpected error”) default: panic(p) &#125; &#125;() var f File if f, err = os.Open(“Somefile”); err != nil &#123; panic(openFileError&#123;&#125;) &#125; defer f.Close() // Some work... // Some other error happens if err != nil &#123; panic(unexpectedError&#123;&#125;) &#125; return result, nil&#125; Go’s multiprocessing facility: Communication Sequential Processes https://en.wikipedia.org/wiki/Communicating_sequential_processes Lightweight concurrency, synchronize using message passing Go routine Go’s concurrency mechanism Lightweight (corresponding to fiber) Growable stacks Scheduling m:n scheduling - m goroutine on n OS threads Scheduler invoked implicitly by language construct E.g. time.Sleep, I/O, etc. Have no identity - nothing like thread id Avoid thread-local storage (TLS, tend to be misused, similar to global variable) Easy go routine migration Example 123456789101112131415161718192021222324252627282930313233343536// clock.gopackage mainimport ( "io" "log" "net" "time")func handleConn(c net.Conn) &#123; defer c.Close() for &#123; _, err := io.WriteString(c, time.Now().Format("15:04:05\n")) if err != nil &#123; return // e.g., client disconnected &#125; time.Sleep(1 * time.Second) &#125;&#125;func main() &#123; listener, err := net.Listen("tcp", "localhost:8000") if err != nil &#123; log.Fatal(err) &#125; for &#123; conn, err := listener.Accept() if err != nil &#123; log.Print(err) // e.g., connection aborted continue &#125; handleConn(conn) //go handleConn(conn) // handle connections concurrently &#125;&#125; 123456789101112131415161718192021222324// netcat.gopackage mainimport ( "io" "log" "net" "os")func main() &#123; conn, err := net.Dial("tcp", "localhost:8000") if err != nil &#123; log.Fatal(err) &#125; defer conn.Close() mustCopy(os.Stdout, conn)&#125;func mustCopy(dst io.Writer, src io.Reader) &#123; if _, err := io.Copy(dst, src); err != nil &#123; log.Fatal(err) &#125;&#125; Go channel Communication mechanism for Go routine Example 12345678910111213141516171819// channel_example.gopackage mainimport "fmt"func main() &#123; messages := make(chan string) go func() &#123; for i := 0; i &lt; 5; i++ &#123; fmt.Println(i) &#125; messages &lt;- "done" &#125;() msg := &lt;-messages fmt.Println(msg)&#125; More reading https://golang.org/doc/ The Go Programming Language - http://www.gopl.io/ https://blog.golang.org/]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Cloud</tag>
        <tag>Go</tag>
        <tag>GAE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ElasticSearch and GCE]]></title>
    <url>%2F2019%2F04%2F29%2FElasticSearch%20and%20GCE%2F</url>
    <content type="text"><![CDATA[Introduction to AroundDemo: http://recordit.co/awrQb1zn2I Around: a Geo-index based social network • Built a scalable web service in Go to handle posts and deployed to Google Cloud (GAE flex) for better scaling • Utilized ElasticSearch (GCE) to provide geo-location based search functions such that users can search nearby posts within a distance (e.g. 200km) • Used Google Dataflow to implement a daily dump of posts to BigQuery table for offline analysis • Aggregated the data at the post level and user level to improve the keyword based spam detection (BigQuery) Create a new cloud project.Step 2.1.1 Open https://console.cloud.google.com/ and sign in with your gmail account. Choose Sign up for free trial, enter a credit card (Must do). GCP has $300 discount for new users, which is enough for project purpose. Step 2.1.2 Click ‘My Project’. Create a new Project called ‘Around’. Google Cloud will automatically generate a new project id for you. Geo-Index and ElasticSearchhow to perform 1-d range search? For example, given a 1-d binary search tree, find all the values between [3, 18]. What about 2d data? Geo index: lat between [10.2, 10.3] and lon between [120.0, 120.5] Price between [$10, $100], date between [Jan-01-2017, Jun-01-2017] Weight between [120pb,140pb], height between [150cm, 180cm] … K-D tree is one implementation to solve such k-dimensional search problem. Then we choose one median point and split the space into two parts horizontally. Continue to split them into more parts (vertically) Question: how to find all the points within a Range (R)? Range Search Algorithm: If query box doesn’t overlap bounding box, stop recursion If bounding box is a subset of query box, report all the points in current subtree If bounding box overlaps query box, recurse left and right ELK (ElasticSearch, Logstash and Kibana)Elasticsearch is an open source, distributed, RESTful search engine. As the heart of the Elastic Stack, it centrally stores your data so you can query the data quickly. SQL is slower. Since ELK uses a pair to search directly. 1SELECT * FROM LOCATIONS WHERE lat &lt;= 12 AND lat &gt;= 10 AND lon &gt;= 120 AND lon &lt;= 130 Google Compute Engine (GCE)Cloud Model IaaS (Infrastructure as a service) Offers virtual machines (Xen, KVM, VirtualBox, VMware ESX, etc.). Amazon EC2 and Google Compute Engine belong to IaaS as well. PaaS (Platform as a service) computing platform including programming language execution environment, database and web server. Develop and run their software solutions on a cloud platform without the cost and complexity of buying and managing hardware and software layers Microsoft Azure, Google App Engine SaaS (Software as a service) users are provided access to application software and databases.Google Apps, GoToMeeting The overall structure (tech stack) of our project: Question: why we need such a complicated infrastructure Answer: because in industry, we need to handle very different requirements compared to in school. ConfigureFind NETWORKING -&gt; VPC network -&gt; Firewall rulesClick CREATE FIREWALL RULE In the next page, give it a name like ‘elasticsearch’. Set the Target tags to be ‘es’, source IP ranges to be ‘0.0.0.0/0’, and the specified protocols and ports to be ‘tcp:9200’. Wait until the firewall rules is created. Find Compute Engine-&gt;VM instancesChoose ‘Change’ and switch to Ubuntu 16. Keep the size of 10GB is fine. Then in the Networking -&gt; Network tags, set it to be ‘es’ (the firewall rule that we created). After one minute, you will see the instance is started. Choose ‘SSH’ and then ‘Open in browser window’.In the terminal, enter12sudo apt-get updatesudo apt-get install default-jre It will install java to your vm. To verify, enter ‘which java’ and ‘java -version’ to check Install ElasticSearch as below 123wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/deb/elasticsearch/2.3.1/elasticsearch-2.3.1.debsudo dpkg -i elasticsearch-2.3.1.debsudo systemctl enable elasticsearch.service Edit the configuration file 1sudo vim /etc/elasticsearch/elasticsearch.yml Add two lines to the config, to allow all traffic and listen on port 9200. 12network.host: 0.0.0.0http.port: 9200 Save this and Start ElasticSearch 1sudo service elasticsearch start Check the status of ElasticSearch1sudo service elasticsearch status You should be able to see ‘active’ in the status Back to your console.cloud.google.com, find the public IP address(external) Put the IP address and port together (:9200) in a new tab and see whether the server is on. The name or version might be different. NOTE: Don’t use https! Should use http. You should get something like this: 123456789101112&#123; "name" : "Honey Lemon", "cluster_name" : "elasticsearch", "version" : &#123; "number" : "2.3.1", "build_hash" : "bd980929010aef404e7cb0843e61d0665269fc39", "build_timestamp" : "2016-04-04T12:25:05Z", "build_snapshot" : false, "lucene_version" : "5.5.0" &#125;, "tagline" : "You Know, for Search"&#125; Which means your ES server is running as expected. Update Go CodeUpdate handlerSearchOriginal source of codes (https://olivere.github.io/elastic/) In here we have to import source code of elastic.(v3) 123456789To get the package, execute:go get gopkg.in/olivere/elastic.v3To import this package, add the following line to your code:import &quot;gopkg.in/olivere/elastic.v3&quot;Refer to it as elastic. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364func handlerSearch(w http.ResponseWriter, r *http.Request) &#123; fmt.Println("Received one request for search") lat, _ := strconv.ParseFloat(r.URL.Query().Get("lat"), 64) lon, _ := strconv.ParseFloat(r.URL.Query().Get("lon"), 64) // range is optional ran := DISTANCE if val := r.URL.Query().Get("range"); val != "" &#123; ran = val + "km" &#125; fmt.Printf( "Search received: %f %f %s\n", lat, lon, ran) // Create a client client, err := elastic.NewClient(elastic.SetURL(ES_URL), elastic.SetSniff(false)) if err != nil &#123; panic(err) return &#125; // Define geo distance query as specified in // https://www.elastic.co/guide/en/elasticsearch/reference/5.2/query-dsl-geo-distance-query.html q := elastic.NewGeoDistanceQuery("location") q = q.Distance(ran).Lat(lat).Lon(lon) // Some delay may range from seconds to minutes. So if you don't get enough results. Try it later. searchResult, err := client.Search(). Index(INDEX). Query(q). Pretty(true). Do() if err != nil &#123; // Handle error panic(err) &#125; // searchResult is of type SearchResult and returns hits, suggestions, // and all kinds of other information from Elasticsearch. fmt.Printf("Query took %d milliseconds\n", searchResult.TookInMillis) // TotalHits is another convenience function that works even when something goes wrong. fmt.Printf("Found a total of %d post\n", searchResult.TotalHits()) // Each is a convenience function that iterates over hits in a search result. // It makes sure you don't need to check for nil values in the response. // However, it ignores errors in serialization. var typ Post var ps []Post for _, item := range searchResult.Each(reflect.TypeOf(typ)) &#123; // instance of p := item.(Post) // p = (Post) item fmt.Printf("Post by %s: %s at lat %v and lon %v\n", p.User, p.Message, p.Location.Lat, p.Location.Lon) // TODO(student homework): Perform filtering based on keywords such as web spam etc. ps = append(ps, p) &#125; js, err := json.Marshal(ps) if err != nil &#123; panic(err) return &#125; w.Header().Set("Content-Type", "application/json") w.Header().Set("Access-Control-Allow-Origin", "*") w.Write(js)&#125; Code explanationLet’s explain these codes line by line1client, err := elastic.NewClient(elastic.SetURL(ES_URL), elastic.SetSniff(false)) It means we create a connection to ES. If there is err, return. 1q := elastic.NewGeoDistanceQuery("location") Prepare a geo based query to find posts within a geo box. 12345searchResult, err := client.Search(). Index(INDEX). Query(q). Pretty(true). Do() Get the results based on Index (similar to dataset) and query (q that we just prepared). Pretty means to format the output. 1for _, item := range searchResult.Each(reflect.TypeOf(typ)) &#123; Iterate the result in results which are type of Post (typ) 1p := item.(Post) Cast an item to Post, equals to p = (Post) item in java 1ps = append(ps, p) Add the p to an array, equals ps.add(p) in java 1js, err := json.Marshal(ps) Convert the go object(array) to a string1w.Header().Set("Access-Control-Allow-Origin", "*") Allow cross domain visit for javascript. We also need to put ES library in import123456789import ( elastic "gopkg.in/olivere/elastic.v3" "fmt" "net/http" "encoding/json" "log" "strconv" "reflect") Add const before main function 1234567891011121314151617const ( INDEX = "around" TYPE = "post" DISTANCE = "200km" // Needs to update //PROJECT_ID = "around-xxx" //BT_INSTANCE = "around-post" // Needs to update this URL if you deploy it to cloud. ES_URL = "http://YOUR_ES_IP_ADDRESS:9200")func main() &#123; fmt.Println("started-service") http.HandleFunc("/post", handlerPost) http.HandleFunc("/search", handlerSearch) log.Fatal(http.ListenAndServe(":8080", nil))&#125; Replace YOUR_ES_IP_ADDRESS with your ES address (public IP). http://externalIp:9200 Step 2.2.5 Open your terminal (Mac and Windows). Enter 1go get gopkg.in/olivere/elastic.v3 Once it is done, you won’t be able to see any more compile errors in Intellij. If it does not work (elastic is still red), try to restart it. More readings Reflect type https://golang.org/pkg/reflect/ ES in Go https://github.com/olivere/elastic Step 2.2.6 In order to create index in ES, we need to update main What’s mapping in ES? It tells you what’s the type of a variable if not default. 1234567891011121314151617181920212223242526272829303132333435363738func main() &#123; // Create a client client, err := elastic.NewClient(elastic.SetURL(ES_URL), elastic.SetSniff(false)) if err != nil &#123; panic(err) return &#125; // Use the IndexExists service to check if a specified index exists. exists, err := client.IndexExists(INDEX).Do() if err != nil &#123; panic(err) &#125; if !exists &#123; // Create a new index. mapping := `&#123; "mappings":&#123; "post":&#123; "properties":&#123; "location":&#123; "type":"geo_point" &#125; &#125; &#125; &#125; &#125;` _, err := client.CreateIndex(INDEX).Body(mapping).Do() if err != nil &#123; // Handle error panic(err) &#125; &#125; fmt.Println("started-service") http.HandleFunc("/post", handlerPost) http.HandleFunc("/search", handlerSearch) log.Fatal(http.ListenAndServe(":8080", nil))&#125; 1exists, err := client.IndexExists(INDEX).Do() Check if the index exists. 12345678910mapping := `&#123; "mappings":&#123; "post":&#123; "properties":&#123; "location":&#123; "type":"geo_point" &#125; &#125; &#125; &#125; If not, create a new mapping. For other fields (user, message, etc.) no need to have mapping as they are default. For geo location (lat, lon), we need to tell ES that they are geo points instead of two float points such that ES will use Geo-indexing for them (K-D tree) 1_, err := client.CreateIndex(INDEX).Body(mapping).Do() Create this index More readings ES in Go https://github.com/olivere/elastic Mapping in ES https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html Step 2.2.7 Update handlerPost Add external import of uuid 12345678910import ( elastic "gopkg.in/olivere/elastic.v3" "fmt" "net/http" "encoding/json" "log" "strconv" "reflect" "github.com/pborman/uuid") How to add a new document to the index? https://github.com/olivere/elastic has an example 1234567891011121314// Add a document to the index// Refresh(true) means if duplicate appears, overwrite ittweet := Tweet&#123;User: "olivere", Message: "Take Five"&#125;_, err = client.Index(). Index("twitter"). Type("tweet"). Id("1"). BodyJson(tweet). Refresh(true). Do(ctx)if err != nil &#123; // Handle error panic(err)&#125; Student Question: how to complete this one? 123456789101112131415161718192021222324252627282930313233343536373839func handlerPost(w http.ResponseWriter, r *http.Request) &#123; // Parse from body of request to get a json object. fmt.Println("Received one post request") decoder := json.NewDecoder(r.Body) var p Post if err := decoder.Decode(&amp;p); err != nil &#123; panic(err) return &#125; id := uuid.New() // Save to ES. saveToES(&amp;p, id)&#125;// Save a post to ElasticSearchfunc saveToES(p *Post, id string) &#123; // Create a client es_client, err := elastic.NewClient(elastic.SetURL(ES_URL), elastic.SetSniff(false)) if err != nil &#123; panic(err) return &#125; // Save it to index _, err = es_client.Index(). Index(INDEX). Type(TYPE). Id(id). BodyJson(p). Refresh(true). Do() if err != nil &#123; panic(err) return &#125; fmt.Printf("Post is saved to Index: %s\n", p.Message)&#125; Step 2.2.8 Open terminal, enter 1go get github.com/pborman/uuid Make sure your ES_URL is updated from your aws instance in step 1. Step 2.2.9 Run your main.go again ErrorsIf you have such an error, your ES_URL is incorrect. 1panic: no Elasticsearch node available If you have such error, you have started two main.go, stop the other one. 122017/06/30 07:07:01 listen tcp :8080: bind: Only one usage of each socket address (protocol/network address/port) is normally permitted.exit status 1 If you have such error, you forgot to comment one line fmt.Fprintf(w, &quot;Search received: %s %s %s&quot;, lat, lon, ran). 1Search received: %!s(float64=37.4) %... Step 2.2.10 Open Postman, find the post query from history. (POST, http://localhost:8080/post) 12345678&#123; "user":"1111", "message":"一生必去的100个地方", "location":&#123; "lat":37.5, "lon":-120.1 &#125;&#125; And then find the get query from history. (GET, url=http://localhost:8080/search?lat=37.5&amp;lon=-120)You should get the results back 12345678910[ &#123; "user": "1111", "message": "一生必去的100个地方", "location": &#123; "lat": 37.5, "lon": -120.1 &#125; &#125;] Post more examples with different locations and then get with different lat/lon to see how many results you may get. If you have zero result back and no error, probably your geo location is wrong.]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Cloud</tag>
        <tag>Go</tag>
        <tag>ElasticSearch</tag>
        <tag>GCE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Go Basic &amp; Around project]]></title>
    <url>%2F2019%2F04%2F28%2FGo%20Basic%20%26%20Around%20project%2F</url>
    <content type="text"><![CDATA[Project IntroductionAround: a Geo-index based social network • Built a scalable web service in Go to handle posts and deployed to Google Cloud (GAE flex) for better scaling • Utilized ElasticSearch (GCE) to provide geo-location based search functions such that users can search nearby posts within a distance (e.g. 200km) • Used Google Dataflow to implement a daily dump of posts to BigQuery table for offline analysis • Aggregated the data at the post level and user level to improve the keyword based spam detection (BigQuery) constants.js123export const API_ROOT = &apos;https://around-75015.appspot.com&apos;;export const TOKEN_KEY = &apos;TOKEN&apos;;export const AUTH_PREFIX = &apos;Bearer&apos;; Why we need to learn about Go?Answer: server language for next generation (both computer friendly and developer friendly) Who is using Golang Google (Creator), Uber, AirBnb Dropbox, Facebook, eBay, Heroku, Douban, Jingdong, Meituan As opposed to Java, Go is compiled to machine code and is executed directly. Much like C. Go example 1234f, err := os.Open("filename.ext") if err != nil &#123; log.Fatal(err) &#125; Other benefits Multiple return values Multi-threading Go Routine Channels Has borrowed many good ideas from python Python is really easy to break. Does not compile. You will never know it breaks until it breaks. Language is confusing. Good for testing and evaluation with many excellent machine learning libraries. 123456&gt;&gt;&gt; a = set(['hippo'])&gt;&gt;&gt; aset(['hippo'])&gt;&gt;&gt; a = set('hippo')&gt;&gt;&gt; aset(['h', 'i', 'p', 'o']) Setup Local Environment (Go)Make sure you have installed Go based on Prerequisite.Mac Users (Windows User wait a minute) Step 1.1.1 Open Terminal, enter 1go version It should show something like go version go1.10.2 darwin/amd64. Step 1.1.2(Optional: GOPATH default to ~/go) In the same Terminal, enter 1234mkdir ~/goecho export GOPATH=~/go &gt;&gt; ~/.bash_profilesource ~/.bash_profileecho $GOPATH In here we must not overwrite the bin of go, add export PATH=$PATH:/usr/local/go/bin to .bash_profile and update zsh profile Step 1.1.3 In the same Terminal, enter 123mkdir -p ~/Documents/Around/servicecd ~/Documents/Around/servicevim main.go Step 1.1.4 Type ‘a’ or ‘i’ and then copy a hello world program into main.go 1234567package mainimport "fmt"func main() &#123; fmt.Println("Hello, world")&#125; Step 1.1.5 Exit with :wq , in the terminal, type 1go run main.go You should be able to see the output of “Hello, world” First Go programFirst, we need to define some objects in a Go program to represent the data we store. Step 1.3.1 let’s define the struct for post and location. Encode json object (https://golang.org/pkg/encoding/json/) 12345678910111213141516171819package mainimport "fmt"type Location struct &#123; Lat float64 `json:"lat"` Lon float64 `json:"lon"`&#125;type Post struct &#123; // `json:"user"` is for the json parsing of this User field. Otherwise, by default it's 'User'. User string `json:"user"` Message string `json:"message"` Location Location `json:"location"`&#125;func main() &#123; fmt.Println("Hello, world")&#125; Step 1.3.2 Add one method handlerPost() after main() to handle Post. 12345678910111213141516func main() &#123; fmt.Println("Hello, world")&#125;func handlerPost(w http.ResponseWriter, r *http.Request) &#123; // Parse from body of request to get a json object. fmt.Println("Received one post request") decoder := json.NewDecoder(r.Body) var p Post if err := decoder.Decode(&amp;p); err != nil &#123; panic(err) return &#125; fmt.Fprintf(w, "Post received: %s\n", p.Message)&#125; In here if you add rawString json:&quot;lat&quot; after variable, it will parse it automatically What does this method do? If user sends a http request with a body as 1234&#123; “user”: “jack” “message”: “this is a message”&#125; Then it will automatically construct a Post object named p and update its values to be p.User = “jack” and p.Message = “this is a message” Fmt %s means string Just one line of code to decode json object into go object. In comparison, if you do it in java. 123456789101112131415161718192021222324252627282930313233343536JSONObject venue = getVenue(event); if (venue != null) &#123; if (!venue.isNull("address")) &#123; JSONObject address = venue.getJSONObject("address"); StringBuilder sb = new StringBuilder(); if (!address.isNull("line1")) &#123; sb.append(address.getString("line1")); &#125; if (!address.isNull("line2")) &#123; sb.append(address.getString("line2")); &#125; if (!address.isNull("line3")) &#123; sb.append(address.getString("line3")); &#125; builder.setAddress(sb.toString()); &#125; if (!venue.isNull("city")) &#123; JSONObject city = venue.getJSONObject("city"); builder.setCity(getStringFieldOrNull(city, "name")); &#125; if (!venue.isNull("country")) &#123; JSONObject country = venue.getJSONObject("country"); builder.setCountry(getStringFieldOrNull(country, "name")); &#125; if (!venue.isNull("state")) &#123; JSONObject state = venue.getJSONObject("state"); builder.setState(getStringFieldOrNull(state, "name")); &#125; builder.setZipcode(getStringFieldOrNull(venue, "postalCode")); if (!venue.isNull("location")) &#123; JSONObject location = venue.getJSONObject("location"); builder.setLatitude(getNumericFieldOrNull(location, "latitude")); builder.setLongitude(getNumericFieldOrNull(location, "longitude")); &#125; &#125; Step 1.3.3 Replace main function to call handlerPost when started. Final version: 123456789101112import ( "fmt" "net/http" "encoding/json" "log")func main() &#123; fmt.Println("started-service") http.HandleFunc("/post", handlerPost) log.Fatal(http.ListenAndServe(":8080", nil))&#125; Step 1.3.5 Open your postman,Choose ‘POST’, the url is http://localhost:8080/post, in the request body, enter12345678&#123; "user":"1111", "message":"一生必去的100个地方", "location":&#123; "lat":37.5, "lon":-120.1 &#125;&#125; Click ‘Send’, you should be able to see a response with 1Post received: 一生必去的100个地方 Add another handler for search (called it handlerSearch), the request has a url pattern likehttp://localhost:8080/search?lat=10.0&amp;lon=20.0. Parse it and then print out the lat and lon. Note: to get request parameters from url 1lat := r.URL.Query().Get("lat") Step 1.3.6 Answer1234567891011121314func main() &#123; fmt.Println("started-service") http.HandleFunc("/post", handlerPost) http.HandleFunc("/search", handlerSearch) log.Fatal(http.ListenAndServe(":8080", nil))&#125;func handlerSearch(w http.ResponseWriter, r *http.Request) &#123; fmt.Println("Received one request for search") lat := r.URL.Query().Get("lat") lon := r.URL.Query().Get("lon") fmt.Fprintf(w, "Search received: %s %s", lat, lon)&#125; Step 1.3.7 return a JSON object. Change handlerSearch to be 12345678910111213141516171819202122232425262728293031323334353637383940Import ( … "strconv")const ( DISTANCE = "200km")func handlerSearch(w http.ResponseWriter, r *http.Request) &#123; fmt.Println("Received one request for search") lat, _ := strconv.ParseFloat(r.URL.Query().Get("lat"), 64) lon, _ := strconv.ParseFloat(r.URL.Query().Get("lon"), 64) // range is optional ran := DISTANCE if val := r.URL.Query().Get("range"); val != "" &#123; ran = val + "km" &#125; fmt.Println("range is ", ran) // Return a fake post p := &amp;Post&#123; User:"1111", Message:"一生必去的100个地方", Location: Location&#123; Lat:lat, Lon:lon, &#125;, &#125; js, err := json.Marshal(p) if err != nil &#123; panic(err) return &#125; w.Header().Set("Content-Type", "application/json") w.Write(js)&#125; 在Go里面，变量必须得用到，不然会报错，除非用下划线做变量名 Step 1.3.8 Open Postman, url is http://localhost:8080/search?lat=10.0&amp;lon=20.0&amp;range=300 click send again. You should see something like this 12345678&#123; "user": "1111", "message": "一生必去的100个地方", "location": &#123; "lat": 10, "lon": 20 &#125;&#125;]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Go</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] Git notes]]></title>
    <url>%2F2019%2F04%2F28%2F%5BNotes%5D%20Git%20notes%2F</url>
    <content type="text"><![CDATA[Create a remote repository and push123456789101112131415161718git initgit add .git commit -am &apos;init&apos;git config --local user.name usernamegit config --local user.email emailgit config --list //check configgit config --local core.ignorecase false // turn case sensitivity off// use http to connectcurl -u username https://api.github.com/user/repos -d &apos;&#123;&quot;name&quot;:&quot;RepoName&quot;&#125;&apos;// updategit remote add origin git@github.com:username/RepoName.git git push origin master]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] Cloud Computing Basic]]></title>
    <url>%2F2019%2F04%2F18%2F%5BNotes%5D%20Cloud%20Computing%20Basic%2F</url>
    <content type="text"><![CDATA[Implement verifyLogin and getFullname12345678910111213141516171819202122232425262728293031323334353637/** * Get the first name and last name and concat them to full name, given the userId */@Overridepublic String getFullname(String userId) &#123; if (conn == null) return null; String name = ""; try &#123; String sql = "SELECT first_name, last_name FROM users WHERE user_id = ?"; PreparedStatement stmt = conn.prepareStatement(sql); stmt.setString(1, userId); ResultSet res = stmt.executeQuery(); if (res.next()) name = String.join(" ", res.getString("first_name"), res.getString("last_name")); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return name;&#125;/** * Verify the userId and password */@Overridepublic boolean verifyLogin(String userId, String password) &#123; if (conn == null) return false; try &#123; String sql = "SELECT user_id FROM users WHERE user_id = ? AND password = ?"; PreparedStatement stmt = conn.prepareStatement(sql); stmt.setString(1, userId); stmt.setString(2, password); ResultSet res = stmt.executeQuery(); if (res.next()) return true; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return false;&#125; Make search result aware of favorite history12345678910111213141516171819202122232425262728293031323334/** * get the info from request, query, and response */protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; String userId = request.getParameter("user_id"); double lat = Double.parseDouble(request.getParameter("lat")); double lon = Double.parseDouble(request.getParameter("lon")); String keyword = request.getParameter("term"); // Connect db first DBConnection conn = DBConnectionFactory.getConnection(); List&lt;Item&gt; items = conn.searchItems(lat, lon, keyword); Set&lt;String&gt; favorite = conn.getFavoriteItemIds(userId); conn.close(); JSONArray array = new JSONArray(); try &#123; for (Item item : items) &#123; JSONObject obj = item.toJSONObject(); // check if current item is a favorite item // this field is required by front end to control the fav status obj.put("favorite", favorite.contains(item.getItemId())); array.put(obj); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; RpcHelper.writeJSONArray(response, array);&#125; What’s Cloud ComputingCloud computing is the delivery of on-demand computing resources—everything from applications to data centers—over the Internet on a pay-for-use basis. Since 2006 when Amazon introduced the Elastic Compute Cloud Features: scalability, flexibility, on-demand, reduced labor cost and data center cost, handled by SREs Bad data safety and privacy cannot control downtime Types private cloud (VMware) public cloud (Microsoft Azure, Google App Engine, Amazon EC2) hybrid cloud Amazon EC2Elastic Compute Cloud (EC2)EC2 allows scalable deployment of applications by providing a Web service through which a user can boot an Amazon Machine Image to create a virtual machine, which Amazon calls an “instance”, containing any software desired. A user can create, launch, and terminate server instances as needed, paying by the hour for active servers, hence the term “elastic”. Launch an instance (Ubuntu linux)Step 1, go to http://aws.amazon.com, sign into your account and then open EC2 dashboard. Launch an instance. Step 2, Select the Ubuntu Server 16.04 image. Step 3, Use t2.micro as instance, which is free tier eligible. Click next instead of launch. Step 4, Jump to security group setup. You need to add 2 more TCP ports: 80, 8080. Step 5, Click Launch, you will be asked to create a new key pair and download the private key. You can name it as mykey.pem Connect to the instanceMacOpen your terminal, run:12chmod 600 ~/Downloads/mykey.pemssh -i ~/Downloads/mykey.pem ubuntu@YOUR_INSTANCE_IP if asked “Are you sure you want to continue connecting (yes/no)? ”, type “yes”, enter. You are now on the remote server, you can play with Linux commands. hostname, ifconfig, whoami, uptime, pwd, ls WindowsWindows (Putty) Download Putty and Puttygen from https://the.earth.li/~sgtatham/putty/latest/x86/putty.zip Open Puttygen, “Conversions”-&gt;”Import key”, select mykey.pem file, Save private key as mykey.ppk Open Putty, enter host ip, in SSH-&gt;Auth, choose your ppk file Click Open, enter the username ubuntu Install JavaStep 1, In your instance’s terminal, execute the following commands: sudo apt-get update sudo apt-get install default-jre Step 2, You can verify with java -version Install MySQLStep 1, sudo apt-get install mysql-server. When you are asked for new mysql password, use “root”. Step 2, after installation, type mysql -u root -p in your terminal, then input the “root” as password. Step 3, In the mysql shell, paste the following SQL statements to install the tables: 1234567891011121314DROP DATABASE IF EXISTS myproject;CREATE DATABASE myproject;USE myproject;CREATE TABLE items (item_id VARCHAR(255) NOT NULL, name VARCHAR(255), rating FLOAT, address VARCHAR(255), image_url VARCHAR(255), url VARCHAR(255), distance FLOAT, PRIMARY KEY ( item_id));CREATE TABLE categories (item_id VARCHAR(255) NOT NULL, category VARCHAR(255) NOT NULL, PRIMARY KEY ( item_id, category), FOREIGN KEY (item_id) REFERENCES items(item_id)); CREATE TABLE users (user_id VARCHAR(255) NOT NULL, password VARCHAR(255) NOT NULL, first_name VARCHAR(255), last_name VARCHAR(255), PRIMARY KEY ( user_id ));CREATE TABLE history (user_id VARCHAR(255) NOT NULL, item_id VARCHAR(255) NOT NULL, last_favor_time timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (user_id, item_id), FOREIGN KEY (item_id) REFERENCES items(item_id), FOREIGN KEY (user_id) REFERENCES users(user_id));INSERT INTO users VALUES ("1111", "3229c1097c00d497a0fd282d586be050", "John", "Smith"); Step 4, Type “exit” to quit mysql shell. Install Tomcat 9Step 1, Execute the following commands12345678cd /opt/sudo wget http://apache.mirrors.hoobly.com/tomcat/tomcat-9/v9.0.19/bin/apache-tomcat-9.0.19.tar.gzsudo tar xzf apache-tomcat-9.0.8.tar.gzsudo ln -s apache-tomcat-9.0.8 tomcatecho "export CATALINA_HOME=\"/opt/tomcat\"" &gt;&gt; ~/.bashrcsource ~/.bashrccd /opt/tomcatsudo bin/startup.sh Step 2, Verify with http://YOUR_INSTANCE_IP:8080/ Run Jupiter on EC2WAR file (or Web application ARchive) is a JAR file used to distribute a collection of JavaServer Pages, Java Servlets, Java classes, XML files, tag libraries, static web pages (HTML and related files) and other resources that together constitute a web application. Step 1, Open Eclipse and MAMP, verify your website works correctly on local environment:http://localhost:8080/Jupiter/ Step 2, open your MySQLDBUtil.java, change and make sure port is 3306, and username and password are root. 3306 is default port in MySQL Step 3, In Eclipse, select File -&gt; Export -&gt; Web-&gt;war File, save the war file to disk. Step 4, Copy the war file to your instance. MAC:Open a new terminal window and type:1scp -i ~/Downloads/mykey.pem ~/Downloads/Jupiter.war ubuntu@YOUR_INSTANCE_IP:~/ Windows (MSYS2): 1scp -i /c/Users/&lt;YOUR_USERNAME&gt;/Downloads/mykey.pem /c/Users/&lt;YOUR_PATH&gt;/Jupiter.war ubuntu@YOUR_INSTANCE_IP:~/ Windows (putty):use WinSCP, https://winscp.net/download/WinSCP-5.13.2-Setup.exe Click Advanced-&gt;SSH-&gt;Authentication-&gt;Private key file: choose *.ppk Drag the Jupiter.war to the left (into /home/ubuntu/). Step 5, Both Mac and Windows, back to your terminal/putty, type the following command 1sudo cp ~/Jupiter.war /opt/tomcat/webapps/ Step 6, Wait for a few seconds, then you can verify the server on your browser:http://YOUR_INSTANCE_IP:8080/Jupiter/ Redeploy application: redo step 3-5. Debug configuration此处需要将eclipse的jdk jre compiler全部设为1.8并重新编译，即可解决版本问题。 (optional) Change the HTTP port from 8080 to 80Step 1, On the remote command-line terminal, edit the tomcat configuration by: 1sudo vim /opt/tomcat/conf/server.xml Step 2, Press i to enter edit mode, scroll down to find the following line (around line 69): 12&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;change &quot;8080&quot; to &quot;80&quot; Step 3, Press ESC to exit edit mode, then type :wq to save and exit. Step 4, Restart tomcat by: 12sudo /opt/tomcat/bin/shutdown.shsudo /opt/tomcat/bin/startup.sh Step 5, Visit http://YOUR_IP_ADDRESS/Jupiter/ to see if the server is started correctly. 此处端口设为80，以后访问时就不需要再额外输入端口号了 (optional) Make tomcat auto start when Linux bootsStep 1, On you instance’s terminal, type the following command: 1sudo vim /etc/init.d/tomcat Step 2, Press i to enter the INSERT mode, then paste the following contents: 123456789101112131415161718192021222324252627#!/bin/bash### BEGIN INIT INFO# Provides: tomcat# Required-Start: $network# Required-Stop: $network# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: Start/Stop Tomcat server### END INIT INFOPATH=/sbin:/bin:/usr/sbin:/usr/binstart() &#123; sh /opt/tomcat/bin/startup.sh&#125;stop() &#123; sh /opt/tomcat/bin/shutdown.sh&#125;case $1 in start|stop) $1;; restart) stop; start;; *) echo "Run as $0 &lt;start|stop|restart&gt;"; exit 1;;esac Step 3, Press Esc to exit INSERT mode, then type :wq to save and quit. Step 4, Make the new file executable: 1sudo chmod +x /etc/init.d/tomcat Step 5, update bashrc to catch your script: 1sudo update-rc.d tomcat defaults Step 6, (optional) you can use sudo /etc/init.d/tomcat restart to manually restart tomcat. (optional) Make tomcat auto restart everydayYour web app may be not that stable to run for months. You can restart it every night to keep it healthy. Step 1, On you instance’s terminal, type the following command: 1sudo crontab -e Step 2, Input 3 to select vim.basic as the editor Step 3, Move the cursor to the end, press i to enter edit mode. Input the following, It means restart tomcat at 1:00 and 13:00 UTC everyday.: 10 1,13 * * * sudo /etc/init.d/tomcat restart 定时在1:00和13:00tomcat重启 Step 4, Press Esc to exit INSERT mode, then type :wq to save and quit. Remote debug:You can check Java error from Tomcat runtime log. Location: 1/opt/tomcat/logs/localhost.&lt;date&gt;.log Check tomcat process:ps aux|grep tomcat 1root 17273 78.3 7.9 2225932 80404 pts/0 Sl 20:30 0:02 /usr/bin/java -Djava.util.logging.config.file=/opt/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -Dignore.endorsed.dirs= -classpath /opt/tomcat/bin/bootstrap.jar:/opt/tomcat/bin/tomcat-juli.jar -Dcatalina.base=/opt/tomcat -Dcatalina.home=/opt/tomcat -Djava.io.tmpdir=/opt/tomcat/temp org.apache.catalina.startup.Bootstrap start 17273 is the process id To kill the process 1Sudo kill -9 17273]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Cloud</tag>
        <tag>Database</tag>
        <tag>Java</tag>
        <tag>Tomcat</tag>
        <tag>MySQL</tag>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] AJAX Basic]]></title>
    <url>%2F2019%2F04%2F18%2F%5BNotes%5D%20AJAX%20Basic%2F</url>
    <content type="text"><![CDATA[What is AJAX?AJAX is not a programming language.AJAX just uses a combination of: A browser built-in XMLHttpRequest object (to request data from a web server) JavaScript and HTML DOM (to display or use the data) AJAX 可以实现异步通信 How AJAX Works How to use AJAXThe keystone of AJAX is the XMLHttpRequest object. creating an XMLHttpRequest object1var xhttp = new XMLHttpRequest(); send a request to a server, we use the open() and send() methods of the XMLHttpRequest object12xhttp.open("GET", "ajax_info.txt", true);xhttp.send(); GET or POST?GET is simpler and faster than POST, and can be used in most cases.However, always use POST requests when: A cached file is not an option (update a file or database on the server). Sending a large amount of data to the server (POST has no size limitations). Sending user input (which can contain unknown characters), POST is more robust and secure than GET. Projectdemo of our web applications: http://34.211.21.63/Event/ Complete HTML/CSS/Javascript codehttp://jsbin.com/hocukukiva/edit?html,css,js 将JSBin里面的代码分别放在：123/WebContent/index.html/WebContent/styles/main.css/WebContent/scripts/main.js 访问： http://localhost:8080/Jupiter 自动跳转至index.htmlhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset 1234567font-size: 0.9em; /* means 0.9 * parent's font-size */.top-nav &#123; /* flex means listed from left to right */ flex: 1;&#125; JavaScriptStep 1 ()() Run the scripts1234// Run all following scripts(function() &#123;&#125;)() Step 2 Gloval Variables1234var user_id = '1111';var user_fullname = 'John Smith';var lng = -122.08;var lat = 37.38; step3: main function(entrance)1234567891011121314init();/* step4: define init function */function init() &#123; // Register event listeners $('nearby-btn').addEventListener('click', loadNearbyItems);// $('fav-btn').addEventListener('click', loadFavoriteItems);// $('recommend-btn').addEventListener('click', loadRecommendedItems); var welcomeMsg = $('welcome-msg'); welcomeMsg.innerHTML = 'Welcome, ' + user_fullname; // step 7 initGeoLocation();&#125; step5: create $ function12345678910111213141516/** * A helper function that creates a DOM element &lt;tag options...&gt; */function $(tag, options) &#123; if (!options) &#123; return document.getElementById(tag); &#125; var element = document.createElement(tag); for ( var option in options) &#123; if (options.hasOwnProperty(option)) &#123; element[option] = options[option]; &#125; &#125; return element;&#125; step6: create AJAX helper function12345678910111213141516171819202122232425262728293031323334353637/** * @param method - GET|POST|PUT|DELETE * @param url - API end point * @param callback - This the successful callback * @param errorHandler - This is the failed callback */function ajax(method, url, data, callback, errorHandler) &#123; var xhr = new XMLHttpRequest(); xhr.open(method, url, true); // 判断request xhr.onload = function() &#123; // 判断 resopnse if (xhr.status === 200) &#123; // callback 属于回调函数 callback(xhr.responseText); &#125; else if (xhr.status === 403) &#123; onSessionInvalid(); &#125; else &#123; errorHandler(); &#125; &#125;; xhr.onerror = function() &#123; console.error("The request couldn't be completed."); errorHandler(); &#125;; if (data === null) &#123; xhr.send(); &#125; else &#123; xhr.setRequestHeader("Content-Type", "application/json;charset=utf-8"); xhr.send(data); &#125;&#125; step 7: initGeoLocation function1234567891011121314function initGeoLocation() &#123; if (navigator.geolocation) &#123; // step 8 // get current position by browser. navigator.geolocation.getCurrentPosition(onPositionUpdated, onLoadPositionFailed, &#123; maximumAge : 60000 &#125;); showLoadingMessage('Retrieving your location...'); &#125; else &#123; // step 9 onLoadPositionFailed(); &#125;&#125; step 8: onPositionUpdated function1234567function onPositionUpdated(position) &#123; lat = position.coords.latitude; lng = position.coords.longitude; // step 11 loadNearbyItems();&#125; step 9: onLoadPositionFailed function123456function onLoadPositionFailed() &#123; console.warn('navigator.geolocation is not available'); //step 10 getLocationFromIP();&#125; step 10: getLocationFromIP function1234567891011121314151617function getLocationFromIP() &#123; // Get location from http://ipinfo.io/json var url = 'http://ipinfo.io/json' var req = null; ajax('GET', url, req, function(res) &#123; var result = JSON.parse(res); if ('loc' in result) &#123; var loc = result.loc.split(','); lat = loc[0]; lng = loc[1]; &#125; else &#123; console.warn('Getting location by IP failed.'); &#125; // step 11 loadNearbyItems(); &#125;);&#125; step 11: loadNearbyItems function12345678910111213141516171819202122232425262728293031323334353637/** * API #1 Load the nearby items API end point: [GET] * /Dashi/search?user_id=1111&amp;lat=37.38&amp;lon=-122.08 */function loadNearbyItems() &#123; console.log('loadNearbyItems'); // step 12 activeBtn('nearby-btn'); // The request parameters var url = './search'; var params = 'user_id=' + user_id + '&amp;lat=' + lat + '&amp;lon=' + lng; var req = JSON.stringify(&#123;&#125;); // step 13 // display loading message showLoadingMessage('Loading nearby items...'); // make AJAX call ajax('GET', url + '?' + params, req, // successful callback function(res) &#123; var items = JSON.parse(res); if (!items || items.length === 0) &#123; // step 14 showWarningMessage('No nearby item.'); &#125; else &#123; // step 16 listItems(items); &#125; &#125;, // failed callback function() &#123; // step 15 showErrorMessage('Cannot load nearby items.'); &#125;);&#125; step 12: activeBtn function1234567891011121314151617/** * A helper function that makes a navigation button active * * @param btnId - The id of the navigation button */function activeBtn(btnId) &#123; var btns = document.getElementsByClassName('main-nav-btn'); // deactivate all navigation buttons for (var i = 0; i &lt; btns.length; i++) &#123; btns[i].className = btns[i].className.replace(/\bactive\b/, ''); &#125; // active the one that has id = btnId var btn = $(btnId); btn.className += ' active';&#125; step 13: showLoadingMessage function12345678910111213141516171819function showLoadingMessage(msg) &#123; var itemList = $('item-list'); itemList.innerHTML = '&lt;p class="notice"&gt;&lt;i class="fa fa-spinner fa-spin"&gt;&lt;/i&gt; ' + msg + '&lt;/p&gt;';&#125;/** step 14: showWarningMessage function **/function showWarningMessage(msg) &#123; var itemList = $('item-list'); itemList.innerHTML = '&lt;p class="notice"&gt;&lt;i class="fa fa-exclamation-triangle"&gt;&lt;/i&gt; ' + msg + '&lt;/p&gt;';&#125;/** step15: showErrorMessage function **/function showErrorMessage(msg) &#123; var itemList = $('item-list'); itemList.innerHTML = '&lt;p class="notice"&gt;&lt;i class="fa fa-exclamation-circle"&gt;&lt;/i&gt; ' + msg + '&lt;/p&gt;';&#125; step16: listItems function12345678910111213/** * @param items - An array of item JSON objects */function listItems(items) &#123; // Clear the current results var itemList = $('item-list'); itemList.innerHTML = ''; for (var i = 0; i &lt; items.length; i++) &#123; // step 17 addItem(itemList, items[i]); &#125;&#125; step17: addItem function1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495/** * Add item to the list * @param itemList - The &lt;ul id="item-list"&gt; tag * @param item - The item data (JSON object) */function addItem(itemList, item) &#123; var item_id = item.item_id; // create the &lt;li&gt; tag and specify the id and class attributes var li = $('li', &#123; id : 'item-' + item_id, className : 'item' &#125;); // set the data attribute li.dataset.item_id = item_id; li.dataset.favorite = item.favorite; // item image if (item.image_url) &#123; li.appendChild($('img', &#123; src : item.image_url &#125;)); &#125; else &#123; li.appendChild($('img', &#123; src : 'https://assets-cdn.github.com/images/modules/logos_page/GitHub-Mark.png' &#125;)) &#125; // section var section = $('div', &#123;&#125;); // title var title = $('a', &#123; href : item.url, target : '_blank', className : 'item-name' &#125;); title.innerHTML = item.name; section.appendChild(title); // category var category = $('p', &#123; className : 'item-category' &#125;); category.innerHTML = 'Category: ' + item.categories.join(', '); section.appendChild(category); var stars = $('div', &#123; className : 'stars' &#125;); for (var i = 0; i &lt; item.rating; i++) &#123; var star = $('i', &#123; className : 'fa fa-star' &#125;); stars.appendChild(star); &#125; if (('' + item.rating).match(/\.5$/)) &#123; stars.appendChild($('i', &#123; className : 'fa fa-star-half-o' &#125;)); &#125; section.appendChild(stars); li.appendChild(section); // address var address = $('p', &#123; className : 'item-address' &#125;); address.innerHTML = item.address.replace(/,/g, '&lt;br/&gt;').replace(/\"/g, ''); li.appendChild(address); // favorite link var favLink = $('p', &#123; className : 'fav-link' &#125;); favLink.onclick = function() &#123; changeFavoriteItem(item_id); &#125;; favLink.appendChild($('i', &#123; id : 'fav-icon-' + item_id, className : item.favorite ? 'fa fa-heart' : 'fa fa-heart-o' &#125;)); li.appendChild(favLink); itemList.appendChild(li);&#125;]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] Simple Recommendation System]]></title>
    <url>%2F2019%2F04%2F17%2F%5BNotes%5D%20Simple%20Recommendation%20System%2F</url>
    <content type="text"><![CDATA[Continue to implement get historyImplement getFavoriteItemsmethod123456789101112131415161718192021222324252627282930313233343536373839/** * Get the favorite items given userId in the history table * userId -&gt; itemId -&gt; favorite items */@Overridepublic Set&lt;Item&gt; getFavoriteItems(String userId) &#123; if (conn == null) return new HashSet&lt;Item&gt;(); Set&lt;Item&gt; favoriteItems = new HashSet&lt;Item&gt;(); Set&lt;String&gt; itemIds = getFavoriteItemIds(userId); try &#123; String sql = "SELECT * FROM items WHERE item_id = ?"; PreparedStatement stmt = conn.prepareStatement(sql); for (String itemId: itemIds) &#123; stmt.setString(1, itemId); // executeQuery returns a table(ResultSet) ResultSet res = stmt.executeQuery(); ItemBuilder builder = new ItemBuilder(); // iterator while (res.next()) &#123; builder.setItemId(res.getString("item_id")); builder.setName(res.getString("name")); builder.setAddress(res.getString("address")); builder.setImageUrl(res.getString("image_url")); builder.setUrl(res.getString("url")); builder.setCategories(getCategories(itemId)); builder.setDistance(res.getDouble("distance")); builder.setRating(res.getDouble("rating")); favoriteItems.add(builder.build()); &#125; &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; return favoriteItems;&#125; Next, let’s try getFavoriteItemIds and getCategories12345678910111213141516171819202122232425262728293031323334353637383940414243/** * Given userId, query history table, get corresponding item_id. */@Overridepublic Set&lt;String&gt; getFavoriteItemIds(String userId) &#123; if (conn == null) return new HashSet&lt;String&gt;(); Set&lt;String&gt; favoriteItemIds = new HashSet&lt;String&gt;(); try &#123; String sql = "SELECT * FROM history WHERE user_id = ?"; PreparedStatement stmt = conn.prepareStatement(sql); stmt.setString(1, userId); ResultSet res = stmt.executeQuery(); while (res.next()) &#123; favoriteItemIds.add(res.getString("item_id")); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; return favoriteItemIds;&#125;/** * Given itemId, query categories table, get corresponding categories */@Overridepublic Set&lt;String&gt; getCategories(String itemId) &#123; if (conn == null) return new HashSet&lt;&gt;(); Set&lt;String&gt; categories = new HashSet&lt;String&gt;(); try &#123; String sql = "SELECT category FROM categories WHERE item_id = ?"; PreparedStatement stmt = conn.prepareStatement(sql); stmt.setString(1, itemId); ResultSet res = stmt.executeQuery(); while (res.next()) &#123; categories.add(res.getString("category")); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; return categories;&#125; Get back to ItemHistory.java, update doGet method.1234567891011121314151617181920/** * Get the user_id from request, query the favorite items, and handle the response */protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; String userId = request.getParameter("user_id"); JSONArray array = new JSONArray(); DBConnection conn = DBConnectionFactory.getConnection(); Set&lt;Item&gt; items = conn.getFavoriteItems(userId); for (Item item: items) &#123; JSONObject obj = item.toJSONObject(); try &#123; obj.append("favorite", true); &#125; catch (JSONException e) &#123; e.printStackTrace(); &#125; array.put(obj); &#125; RpcHelper.writeJSONArray(response, array);&#125; test with http://localhost:8080/Jupiter/history?user_id=1111Recommendation SystemWidely exists in industry and it is a popular interview question. Facebook: news feed, friends, ‘Do you know this friend?’的例子 LinkedIn: jobs, companies, acquaintances, ‘Are you interested in this job?’的例子 Amazon: 电饭锅的例子 Google Ads: 两颗红豆的例子 Engineering Design Given a user, fetch all the events (ids) this user has visited. (which table? which API?) 12//history: history_id, user_id, item_id, last_favor_time.Set&lt;String&gt; itemIds = getFavoriteItemIds(userId); given all these events, what are the categories? (which table? which API?) 12//categories: item_id, category.Set&lt;String&gt; categories = getCategories(itemId); given these categories, what are the events that belong to them (which table? which API?) 12//external APIList&lt;Item&gt; items = searchItems(userId, lat, lon, category); filter events that this user has visited Code ImplementationAdd a new package src/algorithm. Add GeoRecommendation.java. Idea of this algorithm: First get the current user’s favourite items, then get all categories of this user’s favorites, sort them by descending order. Then get these categories, search items again, sort this items with distance(Ascending order), and add those items to the result. Category &gt; Distance. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public List&lt;Item&gt; recommendItems(String userId, double lat, double lon) &#123; List&lt;Item&gt; recommendedItems = new ArrayList&lt;Item&gt;(); DBConnection conn = DBConnectionFactory.getConnection(); // 1. Get all favorite itemIds Set&lt;String&gt; favoriteItemIds = conn.getFavoriteItemIds(userId); // 2. Get all categories by favorite items, sort by count // Use a map to store category and its counts Map&lt;String, Integer&gt; allCategories = new HashMap&lt;&gt;(); for (String itemId: favoriteItemIds) &#123; Set&lt;String&gt; categories = conn.getCategories(itemId); for (String category: categories) &#123; allCategories.put(category, allCategories.getOrDefault(category, 0) + 1); &#125; &#125; // Sort the category // avoid integer overflow, Use Integer.compare(int, int) List&lt;Entry&lt;String, Integer&gt;&gt; categoryList = new ArrayList&lt;&gt;(allCategories.entrySet()); // more occurrences first Collections.sort(categoryList, new Comparator&lt;Entry&lt;String, Integer&gt;&gt;( ) &#123; @Override public int compare(Entry&lt;String, Integer&gt; o1, Entry&lt;String, Integer&gt; o2) &#123; return Integer.compare(o2.getValue(), o1.getValue()); &#125; &#125;); // 3. do search based on category, filter out favorite events, sort by distance Set&lt;Item&gt; visitedItems = new HashSet&lt;Item&gt;(); for (Entry&lt;String ,Integer&gt; category: categoryList) &#123; List&lt;Item&gt; items = conn.searchItems(lat, lon, category.getKey()); List&lt;Item&gt; filteredItems = new ArrayList&lt;Item&gt;(); for (Item item: items) &#123; // if not visited again and not already in the favorite list, add to recommendation list if (!favoriteItemIds.contains(item.getItemId()) &amp;&amp; !visitedItems.contains(item)) &#123; filteredItems.add(item); &#125; &#125; // sort the items in filtered items. less distance first Collections.sort(filteredItems, new Comparator&lt;Item&gt;() &#123; @Override public int compare(Item o1, Item o2) &#123; return Double.compare(o1.getDistance(), o2.getDistance()); &#125; &#125;); visitedItems.addAll(items); recommendedItems.addAll(filteredItems); &#125; return recommendedItems;&#125; Step 2, Go to src/rpc/RecommendItem.java, implement doGet()method.123456789101112131415161718192021/** * Get the lat and lon and current userId, return a list of recommended items */protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; String userId = request.getParameter("user_id"); double lat = Double.parseDouble(request.getParameter("lat")); double lon = Double.parseDouble(request.getParameter("lon")); GeoRecommendation recommendation = new GeoRecommendation(); List&lt;Item&gt; items = recommendation.recommendItems(userId, lat, lon); JSONArray result = new JSONArray(); try &#123; for(Item item: items) &#123; result.put(item.toJSONObject()); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; RpcHelper.writeJSONArray(response, result);&#125; Step 3, De-duplicate items in recommendation results.Since we’re using set to save results from our recommendation function, we need do the de-duplication based on item_id. So go to Item.java, add hashCode() and equals(). Eclipse provides an easy way to add this two methods. Careful, only select itemId when generating these methods.]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] JavaScript Basic 2]]></title>
    <url>%2F2019%2F04%2F16%2F%5BNotes%5D%20JavaScript%20Basic%202%2F</url>
    <content type="text"><![CDATA[Scope chainIn JavaScript there are two types of scope: Local scope Global scopeJavaScript has function scope: Each function creates a new scope. Scope determines the accessibility (visibility) of these variables. Variables defined inside a function are not accessible (visible) from outside the function. Scope chainThe scope chain property of each execution context is simply a collection of the current context variable object + all parent’s lexical variable objects. this in JavaScript 12345678&lt;script&gt;function add(a, b) &#123;this.a = 19;// window is a father object in JS// 如果函数调用中没指定当前是类还是函数（是否有new），this默认指windowconsole.log('a' in window); // return true&#125;&lt;/script&gt; ClosureDefinitionA closure is a function having access to the parent scope, even after the parent function has closed. Closure here includes the annonymous function and the local variable arg. Here the local variable won’t be released even add() is ended. examples: BOM &amp; DOMBOMThere are no official standards for the Browser Object Model (BOM).Since modern browsers have implemented (almost) the same methods and properties for JavaScript interactivity, it is often referred to, as methods and properties of the BOM. The BOM (Browser Object Model) consists of the objects navigator, history,screen, location and document which are children of window DOMThe Document Object Model (DOM) connects web pages to scripts or programming languages. Usually that means JavaScript. The DOM model represents a document with a logical tree. DOM methods allow programmatic access to the tree; with them you can change the document’s structure, style or content. DOM nodes can have event handlers attached to them. Once an event is triggered, the event handlers get executed. Document Object When an HTML document is loaded into a web browser, it becomes a document object. The document object is the root node of the HTML document. Finding HTML Elements Method Description document.getElementById(id) Find an element by element id document.getElementsByTagName(name) Find elements by tag name document.getElementsByClassName(name) Find elements by class name Changing HTML Elements Method Description element.innerHTML = new html content Change the inner HTML of an element element.attribute = new value Change the attribute value of an HTML element element.setAttribute(attribute, value) Change the attribute value of an HTML element element.style.property = new style Change the style of an HTML element Adding and Deleting Elements Method Description document.createElement(element) Create an HTML element document.removeChild(element) Remove an HTML element document.appendChild(element) Add an HTML element document.replaceChild(element) Replace an HTML element document.write(text) Write into the HTML output stream Event Capturing phase – the event goes down to the element. Bubbling phase – the event bubbles up from the element. DOM0 - onclick Don’t write JS code inline. DOM2 - addEventListener 捕获阶段与冒泡阶段区别在于谁先触发 Example:]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] MySQL Basic 2]]></title>
    <url>%2F2019%2F04%2F16%2F%5BNotes%5D%20MySQL%20Basic%202%2F</url>
    <content type="text"><![CDATA[Save search results to database Under db.mysql package, create class/MySQLConnection.java. Implement DBConnection interface Implement both close method and constructor. 1234567891011121314151617181920212223242526// connectionprivate Connection conn;// constructorpublic MySQLConnection() &#123; try &#123; Class.forName("com.mysql.jdbc.Driver").newInstance(); conn = DriverManager.getConnection(MySQLDBUtil.URL); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125;/** * close the connection */@Overridepublic void close() &#123; if (conn != null) &#123; try &#123; conn.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; implement searchItems() in MySQLConnection. Previously we call TicketMasterAPI.search from our SearchItem servlet directly. But actually our recommendation code also needs to call the same search function, so we make a designated function here to do the search call.The code is simply copied from what we’ve already had in SearchItem.java. 1234567891011121314/** * Search Item. Same as TMAPI search item. */@Overridepublic List&lt;Item&gt; searchItems(double lat, double lon, String term) &#123; // Get the items from TM TicketMasterAPI tmAPI = new TicketMasterAPI(); List&lt;Item&gt; items = tmAPI.search(lat, lon, term); // Save the items to the db for (Item item: items) &#123; saveItem(item); &#125; return items;&#125; after searchItem, let’s try saveItem to save data into database. Again, careful with the import suggestions. Always choose java.sql.*. 1234567891011121314151617181920212223242526272829303132333435/** * Save single item into db */@Overridepublic void saveItem(Item item) &#123; if (conn == null) &#123; return; &#125; try &#123; String sql = "INSERT IGNORE INTO items VALUES (?, ?, ?, ?, ?, ?, ?)"; PreparedStatement stmt = conn.prepareStatement(sql); // Index starts from 1 stmt.setString(1, item.getItemId()); stmt.setString(2, item.getName()); stmt.setDouble(3, item.getRating()); stmt.setString(4, item.getAddress()); stmt.setString(5, item.getImageURL()); stmt.setString(6, item.getUrl()); stmt.setDouble(7, item.getDistance()); stmt.execute(); // set categories sql = "INSERT IGNORE INTO categories VALUES(?, ?)"; stmt = conn.prepareStatement(sql); for (String category: item.getCategories()) &#123; stmt.setString(1, item.getItemId()); stmt.setString(2, category); stmt.execute(); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; Use PreparedStatement and stmt.settring() can effectively avoid SQL injection. PreparedStatement is faster than raw String. Only have to create it once. SQL injection. Turns the input to the SQL statement, and makes the query always true. 123456789101112// SQL injection// Example:// SELECT * FROM users WHERE username = '&lt;username&gt;' AND password = '&lt;password&gt;';//// sql = "SELECT * FROM users WHERE username = '" + username + "'// AND password = '" + password + "'"//// username: aoweifjoawefijwaoeifj// password: 123456' OR '1' = '1//// SELECT * FROM users WHERE username = 'aoweifjoawefijwaoeifj' AND password = '123456' OR '1' = '1' update DBConnectionFactory. 1234567891011public static DBConnection getConnection(String db) &#123; switch (db) &#123; case "mysql": return new MySQLConnection(); case "mongodb": // return new MongoDBConnection(); return null; default: throw new IllegalArgumentException("Invalid db: " + db); &#125;&#125; In src/rpc/SearchItem.java, add a private dbconnection field and update doGet(). 1234567891011121314151617181920212223242526/** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub double lat = Double.parseDouble(request.getParameter("lat")); double lon = Double.parseDouble(request.getParameter("lon")); String keyword = request.getParameter("term"); // Connect db first then search DBConnection conn = DBConnectionFactory.getConnection(); List&lt;Item&gt; items = conn.searchItems(lat, lon, keyword); JSONArray array = new JSONArray(); try &#123; for (Item item : items) &#123; JSONObject obj = item.toJSONObject(); array.put(obj); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; RpcHelper.writeJSONArray(response, array);&#125; Implement set/unset favorite related functions let’s try setFavoriteItem and unsetFavoriteItem 123456789101112131415161718192021222324252627282930313233343536373839404142/** * Operate on History table. * insert favorite information. */@Overridepublic void setFavoriteItems(String userId, List&lt;String&gt; itemIds) &#123; if (conn == null) &#123; return; &#125; try &#123; String sql = "INSERT IGNORE INTO history (?, ?)"; PreparedStatement stmt = conn.prepareStatement(sql); for (String itemId: itemIds) &#123; stmt.setString(1, userId); stmt.setString(2, itemId); stmt.execute(); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125;&#125;/** * Delete favorite information */@Overridepublic void unsetFavoriteItems(String userId, List&lt;String&gt; itemIds) &#123; if (conn == null) &#123; return; &#125; try &#123; String sql = "DELETE FROM history WHERE user_id = ? AND item_id = ?"; PreparedStatement stmt = conn.prepareStatement(sql); for (String itemId: itemIds) &#123; stmt.setString(1, userId); stmt.setString(2, itemId); stmt.execute(); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; create a new servlet called ItemHistory, update the url mapping to \history create a new function in RpcHelper.java to parse HTTP request body. Imagine the input HTTP request looks like: 1234567&#123; user_id = “1111”, favorite = [ “abcd”, “efgh”, ]&#125; 1234567891011121314151617181920/** * Read the http request and parse it as a JSONObject. * @param request * @return */public static JSONObject readJsonObject(HttpServletRequest request) &#123; StringBuilder sb = new StringBuilder(); try &#123; BufferedReader reader = request.getReader(); String line = null; while ((line = reader.readLine()) != null) &#123; sb.append(line); &#125; reader.close(); return new JSONObject(sb.toString()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null;&#125; update doPost() and doDelete in ItemHistory.java to use this new function. 1234567891011121314151617181920212223242526272829/** * Get the set favourite request and do the corresponding operation */protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; try &#123; // get userId, itemIDs from request JSONObject input = RpcHelper.readJsonObject(request); String userId = input.getString("user_id"); JSONArray fav_array = input.getJSONArray("favorite"); List&lt;String&gt; itemIds = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; fav_array.length(); i++) &#123; itemIds.add(fav_array.get(i).toString()); &#125; // connect db and update the table DBConnection conn = DBConnectionFactory.getConnection(); conn.setFavoriteItems(userId, itemIds); conn.close(); RpcHelper.writeJSONObject(response, new JSONObject().put("result", "SUCCESS")); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125;/*** Same as doPost(), but change setFavoriteItems() to unsetFavoriteItems()*/protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; open postman, switch to post method, use http://localhost:8080/Jupiter/history, then copy the following JSON object into body. Replace item_id1 and item_id2 with the real item_id exist in your item table. 1234567&#123; 'user_id':'1111', 'favorite' : [ 'item_id1', 'item_id2' ]&#125; now let’s send another request to test our delete function. Open another tab in postman, switch method to delete, use http://localhost:8080/Jupiter/history, then copy the following JSON object into body. Again replace item_id1 with the real item_id exist in your history table.123456&#123; 'user_id':'1111', 'favorite' : [ 'item_id1', ]&#125;]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Database</tag>
        <tag>Java</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] JavaScript Basic]]></title>
    <url>%2F2019%2F04%2F14%2F%5BNotes%5D%20JavaScript%20Basic%2F</url>
    <content type="text"><![CDATA[Linking JavaScript file and html fileAdding JavaScript into an HTML DocumentYou can add JavaScript code in an HTML document by employing the dedicated HTML tag&lt;script&gt; that wraps around JavaScript code.The &lt;script&gt; tag can be placed in the &lt;head&gt; section of your HTML, in the &lt;body&gt; section, or after the &lt;/body&gt; close tag, depending on when you want the JavaScript to load. Method 1: Inline Mode 不便于代码分离 Method 2: using &lt;script&gt; tagThe &lt;script&gt; tag can be placed in the &lt;head&gt; section of your HTML, in the &lt;body&gt; section, or after the &lt;/body&gt; close tag, depending on when you want the JavaScript to load. Internal Style External Style 浏览器先执行完&lt;script&gt;tag才会渲染其他组件 JavaScript Fundamentalsvariables three ways of variable declaration: let var const We use those three keywords to create variables in JavaScript. Example: let message; or var message; or const message; var variables are defined from the beginning of the function, no matter where the definition is. var has no block scope. var can be declared many times, but let and const cannot in the same scope. const is used to declare a constant (unchanging) variable(immutable) let has only block scope, while var can be global Data TypesJavaScript is “dynamically typed”, meaning that there are data types, but variables are not bound to any of them. Date types: Number, String, Boolean, Object, Function, Null, Undefined Number - The number type serves both for integer and floating point numbers: 123, 12.22.. Note: NaN belong to the type number but it’s not “normal” numbers. NaN represents an error. String - A string may consist of only one character or many of them. Double and single quotes have no difference between them in JavaScript. E.g. ‘aba’, “I am a string.” Boolean - The boolean type has only two values: true and false. Null - A special value which is for unknown values. In JavaScript null is not a “reference to a non-existing object” or a “null pointer” like in some other languages.It’s just a special value which has the sense of “nothing”, “empty” or “value unknown”. Example: var age = null;The code above states that the age is unknown or empty for some reason. Undefined - A special value which is for unassigned values. The meaning of undefined is “value is not assigned”. Undefined 和 null 不是数据类型，而是特殊值 Function and Object will cover on the following section. typeof Operator returns the type of the argument. It’s useful when we want to process values of different types differently, or just want to make a quick check. e.g. typeof “abc” - string ComparisonsA comparison returns a value. The value is of the boolean type: true or false. Greater/less than: a &gt; b, a &lt; b. Greater/less than or equals: a &gt;= b, a &lt;= b. Equality check is written as a == b (please note the double equation sign =. A single symbol a = b would mean an assignment). Not equals. In maths the notation is ≠, in JavaScript it’s written as an assignment with an exclamation sign before it: a != b. Note:A regular equality check == has a problem. It cannot differ 0 from false: 120 == false // true“” == false // true That’s because operands of different types are converted to a number by the equality operator ==. An empty string, just like false, becomes a zero.1Number(false) =&gt; 0, Number(“”) =&gt; 0 What to do if we’d like to differentiate 0 from false? A strict equality operator === checks the equality without type conversion.In other words, if a and b are of different types, then a===b immediately returns false without an attempt to convert them. 10 === false // false FunctionFunctions are the main “building blocks” of the program. They allow the code to be called many times without repetition. Function Declaration The function keyword goes first, then goes the name of the function, then a list of parameters between the parentheses (empty in the example above) and finally the code of the function, also named “the function body”, between curly braces. Function Expression The meaning of these code samples is the same: “create a function and put it into the variable sayHi”. Object Objects are used to store keyed collections of various data and more complex entities. e.g. Dog object: age, name, color, breed attributes, and run() activity. How to create an instance of object using new keyword E.g. 123var car = new Car(); car.color = “red”; car.type = “suv”; using literal {} 字面量E.g. var car = { color: ‘red’, type: ‘suv’}; Use . or [] to visit attributes. eg 123t2.name; t2['age']; t2['run'](); // function call example Primitive Type VS. Reference Type Numbers, Strings, Booleans, and the null and undefined types are primitive. Objects, and functions are reference types. Difference: A primitive type has a fixed size in memory. For example, a number occupies eight bytes of memory, and a boolean value can be represented with only one bit. A reference type does not have a fixed size in memory. Primitive types are assigned/copied “as a whole value”, but reference types are stored and copied “by reference”. A variable stores not the object itself, but its “address in memory”, in other words “a reference” to it. When an object variable is copied.the reference is copied, the object is not duplicated. Pass by reference and pass by value In JavaScript primitive types are copied and passed by value and objects are copied and passed by reference value. In terms of function: In Pass by Value, function is called by directly passing the value of the variable as the argument. Changing the argument inside the function doesn’t affect the variable passed from outside the function. In Pass by Reference, function is called by directly passing the reference/address of the variable as the argument. Changing the argument inside the function affect the variable passed from outside the function. example ## Hoisting 变量提升 Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution. Execution Context Global execution context (GEC): This is the default execution context in which JS code start it’s execution when the file first loads in the browser. Functional execution context (FEC): Functional execution context is defined as the context created by the execution of code inside a function. Each function has its own execution context. Execution context stack Execution context stack is a stack data structure to store all the execution stacks created while executing the JS code. Global execution context is present by default in execution context stack and it is at the bottom of the stack. While executing global execution context code, if JS engines finds a function call, it creates functional execution context of that function and pushes that function execution context on top of execution context stack. JS engine executes the function whose execution context is at the top of the execution context stack. Once all the code of the function is executed, JS engines pop’s out that function’s execution context and start’s executing the function which is below it. JavaScript engine creates the execution context in the following two stages: Creation phase and Execution phase. In creation phase, JS engine performs the following task: creates the activation object or the variable object: activation object is a special object in JS which contain all the variables, function arguments and inner functions declarations information. creates the scope chain: Once the activation object gets created, JS engine initializes the scope chain which is a list of all the variables objects inside which the current function exists. This also includes the variable object of global execution context. Scope chain also contains the current function variable object. determines the value of this: After the scope chain, JavaScript engine initialize the value of ‘this’. In the execution phase, JS engines will again scan through the function to update the variable object with the values of the variables and will execute the code.]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] MySQL Basic]]></title>
    <url>%2F2019%2F04%2F13%2F%5BNotes%5D%20MySQL%20Basic%2F</url>
    <content type="text"><![CDATA[Database and Database-Management SystemWhat is Database?A database is an organized collection of data. What is Database-Management System?A database-management system (DBMS) is a computer-software application that interacts with end-users, other applications, and the database itself to capture and analyze data. A general-purpose DBMS allows the definition, creation, querying, update, and administration of databases. Why do we need Database?We need to store some data set, a list of events with id, name, address, and date. What will you do? Text File? Excel? The size of list is large( &gt; 1 million users). Add some constraints to some data, such as ID of each user should be different. Create relations between different kind of data, such as users saved some events before. Quickly retrieve data based on given condition, such as retrieve all events happened in San Francisco. Quickly update or delete data based on given condition, such as update all favorite events for a given user. Need access control on the data, meaning only authorized users can have access to the data set. Allow multiple users access(add, search, update, delete) the data set at the same time. A DBMS allows you to fulfill all requirement above easily. Create our database by using MAMPMAMP stands for “My Apache, MySQL, and PHP”. MAMP is an integrated platform you can install on your machine which allows you to have access to a local MySQL server and its PHP server. Click Preferences -&gt; Ports. Make sure Apache Port is 8888 and MySQL port is 8889. Don’t worry about the Nginx port. Start Server-&gt;open phpMyAdmin-&gt;create new project myproject-&gt;use utf8_general_ci as the collation Relational DBMSER (entity-relationship) model: Entity Relation: connect different entities MySQLBasic Concepts Table: a collection of attributions. Similar to what you’ve seen in an excel chart. Each column is an attribute of an entity, and each row is a record/instance of an entity. Row: a single, implicitly structured data item in a table Column: a set of data values of a particular simple type, one for each row of the table Schema: blueprint of how table is constructed. Project Structure CREATE TABLE history (item_id, user_id, ,... FOREIGN KEY item_id REFERENCE item(item_id)) users - store user information. User_id(primary key) password firstname lastname 1111 abcd Rick Sun 2222 efgh Matt Yan items - store item information. item_id(primary key) name rating url abcd event1 5 www.example1.com efgh event1 0 www.example2.com category - store item-category relationship It’s an implementation detail, we could save category in item table, but there will be more string join/split manipulations in our code, so let’s save them in a separate table. item_id category abcd party efgh party efgh sports Set item_id and category both as Primary Key, to map multiple items to multiple items. history - store user favorite history User_id(foreign key) =&gt; user(user_id) item_id time 1111 abcd 01/01/2018 1111 efgh 01/02/2018 2222 efgh 01/03/2018 A few more concept: Unique key: a key in a relational database that is unique for each record. Primary key: Also a key that is unique for each record. Cannot be NULL and used as a unique identifier. Foreign key: a key used to link two tables together. A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table. Index: improves the speed of data retrieval operations on a database table at the cost of additional writes and storage space to maintain the index data structure. MySQL will create index on column which is declared as key. SQL SEQUEL (Structured English QUEry Language) Structured Query Language is a programming language, which is used to communicate with DBMS. The standard language for relational DBMS. Create tables in Java programConnect to database from our Java program by JDBCJust like our Java servlet classes. JDBC provides interfaces and classes for writing database operations. Technically speaking, JDBC (Java Database Connectivity) is a standard API that defines how Java programs access database management systems. Since JDBC is a standard specification, one Java program that uses the JDBC API can connect to any database management system (DBMS), as long as a driver exists for that particular DBMS. download JDBC archive from http://dev.mysql.com/downloads/connector/j/ add the .jar file into your Eclipse lib. You can drag .jar file to WebContent/WEB-INF/lib directly, or copy that file and paste it (if it does not exist). For DB related functions, please always use: import java.sql.xxx; Create our db related package create a new package named db, then add a new interface called DBConnection. Will add support to MySQL and MongoDB later. Add the basic function signature 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384public interface DBConnection &#123; /** * Close the connection. */ public void close(); /** * Insert the favorite items for a user. * * @param userId * @param itemIds */ public void setFavoriteItems(String userId, List&lt;String&gt; itemIds); /** * Delete the favorite items for a user. * * @param userId * @param itemIds */ public void unsetFavoriteItems(String userId, List&lt;String&gt; itemIds); /** * Get the favorite item id for a user. * * @param userId * @return itemIds */ public Set&lt;String&gt; getFavoriteItemIds(String userId); /** * Get the favorite items for a user. * * @param userId * @return items */ public Set&lt;Item&gt; getFavoriteItems(String userId); /** * Gets categories based on item id * * @param itemId * @return set of categories */ public Set&lt;String&gt; getCategories(String itemId); /** * Search items near a geolocation and a term (optional). * * @param userId * @param lat * @param lon * @param term * (Nullable) * @return list of items */ public List&lt;Item&gt; searchItems(double lat, double lon, String term); /** * Save item into db. * * @param item */ public void saveItem(Item item); /** * Get full name of a user. (This is not needed for main course, just for demo * and extension). * * @param userId * @return full name of the user */ public String getFullname(String userId); /** * Return whether the credential is correct. (This is not needed for main * course, just for demo and extension) * * @param userId * @param password * @return boolean */ public boolean verifyLogin(String userId, String password);&#125; Create a concrete class DBConnectionFactory, this class is used to create db instance 12345678910111213141516171819202122public class DBConnectionFactory &#123; // This should change based on the pipeline. private static final String DEFAULT_DB = "mysql"; public static DBConnection getConnection(String db) &#123; switch (db) &#123; case "mysql": // return new MySQLConnection(); return null; case "mongodb": // return new MongoDBConnection(); return null; default: throw new IllegalArgumentException("Invalid db: " + db); &#125; &#125; public static DBConnection getConnection() &#123; return getConnection(DEFAULT_DB); &#125;&#125; create MySQL version of DBConnection implementation create another package db.mysql, which will only contains mysql version of DBConnection implementation. Then create MySQLDBUtil class in db.mysql package. 123456789101112public class MySQLDBUtil &#123; private static final String HOSTNAME = "localhost"; private static final String PORT_NUM = "8889"; // change it to your mysql port number public static final String DB_NAME = "myproject"; private static final String USERNAME = "root"; private static final String PASSWORD = "root"; public static final String URL = "jdbc:mysql://" + HOSTNAME + ":" + PORT_NUM + "/" + DB_NAME + "?user=" + USERNAME + "&amp;password=" + PASSWORD + "&amp;autoReconnect=true&amp;serverTimezone=UTC"; //jdbc:mysql://localhost:8889/myproject?user=root&amp;password=root&amp;autoReconnect=true&amp;serverTimezone=UTC&#125; create a new class called MySQLTableCreation to automatically reset our tables in our database. So in the future, you can run this function every time when you think the data stored in you DB is messed up. first let’s try to connect to MySQL through JDBC connection. Be careful, always use java.sql.* when eclipse ask you to import DB related packages. 123456789101112131415161718192021222324252627public class MySQLTableCreation &#123; // Run this as Java application to reset db schema. public static void main(String[] args) &#123; try &#123; // This is java.sql.Connection. Not com.mysql.jdbc.Connection. Connection conn = null; // Step 1 Connect to MySQL. try &#123; System.out.println("Connecting to " + MySQLDBUtil.URL); Class.forName("com.mysql.jdbc.Driver").getConstructor().newInstance(); conn = DriverManager.getConnection(MySQLDBUtil.URL); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; if (conn == null) &#123; return; &#125; System.out.println("Import is done successfully."); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; Question: What does this do Class.forName(“com.mysql.jdbc.Driver”).newInstance()?Answer: Ensure the driver is registered. We use Class.forName(&quot;com.mysql.jdbc.Driver&quot;).getConstructor().newInstance(); to register jdbc.Driver class to DriverManager, then create an instance of it using conn = DriverManager.getConnection(MySQLDBUtil.URL); 此处为反射机制的应用 after connect to MySQL, let’s try to drop old tables if they’re existed.Syntax: DROP TABLE IF EXISTS table_name; 12345678910111213// Step 2 Drop tables in case they exist.Statement stmt = conn.createStatement();String sql = "DROP TABLE IF EXISTS categories";stmt.executeUpdate(sql);sql = "DROP TABLE IF EXISTS history";stmt.executeUpdate(sql);sql = "DROP TABLE IF EXISTS items";stmt.executeUpdate(sql);sql = "DROP TABLE IF EXISTS users";stmt.executeUpdate(sql); create 4 tables: User, Item, Category, History. Syntax: 123456CREATE TABLE table_name ( column1 datatype, column2 datatype, column3 datatype, ....); 1234567891011121314151617181920212223242526272829303132333435// Step 3 Create new tablessql = "CREATE TABLE items (" + "item_id VARCHAR(255) NOT NULL," + "name VARCHAR(255)," + "rating FLOAT," + "address VARCHAR(255)," + "image_url VARCHAR(255)," + "url VARCHAR(255)," + "distance FLOAT," + "PRIMARY KEY (item_id))";stmt.executeUpdate(sql);sql = "CREATE TABLE categories (" + "item_id VARCHAR(255) NOT NULL," + "category VARCHAR(255) NOT NULL," + "PRIMARY KEY (item_id, category)," + "FOREIGN KEY (item_id) REFERENCES items(item_id))";stmt.executeUpdate(sql);sql = "CREATE TABLE users (" + "user_id VARCHAR(255) NOT NULL," + "password VARCHAR(255) NOT NULL," + "first_name VARCHAR(255)," + "last_name VARCHAR(255)," + "PRIMARY KEY (user_id))";stmt.executeUpdate(sql);sql = "CREATE TABLE history (" + "user_id VARCHAR(255) NOT NULL," + "item_id VARCHAR(255) NOT NULL," + "last_favor_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP," + "PRIMARY KEY (user_id, item_id)," + "FOREIGN KEY (item_id) REFERENCES items(item_id)," + "FOREIGN KEY (user_id) REFERENCES users(user_id))";stmt.executeUpdate(sql); VarChar 指的是变长数组 last_favor_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP 指的是如果没有给值,默认用当前时间填充 com.mysql.jdbc.Driver is deprecated, change to com.mysql.cj.jdbc.Driver Add a fake user. We don’t have register function in our application, so let’s create a user in our database. Syntax: 12INSERT INTO table_name (column1, column2, column3, ...)VALUES (value1, value2, value3, ...); 12345// Step 4: insert datasql = "INSERT INTO users VALUES (" + "'1111', '3229c1097c00d497a0fd282d586be050', 'John', 'Smith')";System.out.println("Executing query: " + sql);stmt.executeUpdate(sql);]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Database</tag>
        <tag>Java</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] CSS Basic 2]]></title>
    <url>%2F2019%2F04%2F13%2F%5BNotes%5D%20CSS%20Basic%202%2F</url>
    <content type="text"><![CDATA[Box ModelIntroduction The CSS box model is essentially a box that wraps around every HTML element. It consists of: margins, borders, padding, and the actual content. Components Content - The content of the box, where text and images appear Padding - Clears an area around the content. The padding is transparent Border - A border that goes around the padding and content Margin - Clears an area outside the border. The margin is transparent Every element on a page is a rectangular box. Types of box modelThere are actually two types of box model, one is W3C standard, the other is IE model. Basically they all calculate the element width and height based on the content width, content height, padding and border, but their formula are different: W3C standard 12345678outer box (element space size)Element space width = content width + padding + border + marginElement space height = content height + padding + border + margininner box (element size)Element width = content width + padding + borderElement height = content height + padding + border IE box model 1234outer box (element space size)Element space width = content width + margin Element space height = content height + margin(content width including padding and border) In order to make sure we apply the same box model to all browsers, CSS3 provides us with the new box-sizing property: box-sizing: content-box || border-box || inherit Margin Collapsing Layout Definition: the “display” property Block A block-level element starts on a new line and stretches out to the left and right as far as it can. Inline An inline element can wrap some text inside a paragraph without disrupting the flow of that paragraph. center element margin: 0 auto; Centers the block elements to the center of the container. text-align: center; Centers the text content. display:flex; justify-content: center; Centers the items in a flex box horizontally. display:flex; align-items: center; Centers the items in a flex box vertically. FloatingDefinition The float CSS property specifies that an element should be placed along the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the web page, though still remaining a part of the flow. How floated elements are positioned: when an element is floated, it is taken out of the normal flow of the document (though still remaining part of it). It is shifted to the left, or right, until it touches the edge of its containing box, or another floated element. Syntax float: none|left|right|initial|inherit; The float property can have one of the following values: left - The element floats to the left of its container right- The element floats to the right of its container none - The element does not float (will be displayed just where it occurs in the text). This is default inherit - The element inherits the float value of its parent Important Facts float first When a container has multiple elements, some of them are floating, some of them are not, remember to put all the floating elements in front of the non-floating ones! Browsers try to figure out the spacing for those floating ones first. clear The clear property specifies on which sides of an element the floating elements are not allowed to float. .clear { clear: both; /* it can be left|right|both */ } inline-block Floating works great, but as you see we need to apply the .clear to clear out the floating even for a block element. There is another way to achieve the floating effect, that is to use inline-block display. similar to inline, inline-block allows multiple elements to layout on the same line, the beauty of it is that elements can automatically wrap around if the wrapper container is too small, and if you add a block element right after an inline-block element, we don’t need to use the ugly .clear fix. 可实现左右排版 Positionstatic (default) Default value, means the element is not positioned! A static element is said to be not positioned and an element with its position set to anything else is said to be positioned. relative The top, right, bottom and left properties of a relatively-positioned element will cause it to be adjusted away from its original position. Other content will not be adjusted to fit into any gap left by the element. absolute The top, right, bottom and left properties of an absolute-positioned element will cause it to be positioned relatively to the nearest positioned ancestor. fixed A fixed element is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. Examples Trick: 子容器绝对定位（相对于父容器）， 父容器相对定位。 Z-indexDefinition The z-index property specifies the stack order of an element. An element with greater stack order is always in front of an element with a lower stack order. Note: z-index only works on positioned elements (position:absolute, position:relative, or position:fixed). Code http://jsbin.com/rafomem/20/edit?html,css,output]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] TicketMaster API 2]]></title>
    <url>%2F2019%2F04%2F12%2F%5BNotes%5D%20TicketMaster%20API%202%2F</url>
    <content type="text"><![CDATA[TicketMaster API 2Benifits of builder class Easier to use because you don’t need to call a constructor with long parameter list Easier to implement because you don’t need to provide constructors with different combinations of private fields. TicketMasterAPI.java Add getAddress 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/*** get the Address from the JSONObject* @param event* @return A String of address* @throws JSONException*/private String getAddress(JSONObject event) throws JSONException &#123; if (!event.isNull("_embedded")) &#123; JSONObject embedded = event.getJSONObject("_embedded"); if (!embedded.isNull("venues")) &#123; JSONArray venues = embedded.getJSONArray("venues"); for (int i = 0; i &lt; venues.length(); ++i) &#123; JSONObject venue = venues.getJSONObject(i); StringBuilder sb = new StringBuilder(); if (!venue.isNull("address")) &#123; JSONObject address = venue.getJSONObject("address"); if (!address.isNull("line1")) &#123; sb.append(address.getString("line1")); &#125; if (!address.isNull("line2")) &#123; sb.append(" "); sb.append(address.getString("line2")); &#125; if (!address.isNull("line3")) &#123; sb.append(" "); sb.append(address.getString("line3")); &#125; &#125; if (!venue.isNull("city")) &#123; JSONObject city = venue.getJSONObject("city"); if (!city.isNull("name")) &#123; sb.append(" "); sb.append(city.getString("name")); &#125; &#125; if (!sb.toString().equals("")) &#123; return sb.toString(); &#125; &#125; &#125; &#125; return "";&#125; Add getImageURL 12345678910111213141516171819202122// &#123;"images": [&#123;"url": "www.example.com/my_image.jpg"&#125;, ...]&#125;/*** Get the image URL from a JSONOBject* @param event* @return A String of image URL* @throws JSONException*/private String getImageUrl(JSONObject event) throws JSONException &#123; if (!event.isNull("images")) &#123; JSONArray images = event.getJSONArray("images"); for (int i = 0; i &lt; images.length(); ++i) &#123; JSONObject image = images.getJSONObject(i); if (!image.isNull("url")) &#123; return image.getString("url"); &#125; &#125; &#125; return "";&#125; Add getCategories 12345678910111213141516171819202122232425// &#123;"classifications" : [&#123;"segment": &#123;"name": "music"&#125;&#125;, ...]&#125;/** * Get a set of categories from a JSONObject * @param event * @return A set of string * @throws JSONException */private Set&lt;String&gt; getCategories(JSONObject event) throws JSONException &#123; Set&lt;String&gt; categories = new HashSet&lt;&gt;(); if (!event.isNull("classifications")) &#123; JSONArray classifications = event.getJSONArray("classifications"); for (int i = 0; i &lt; classifications.length(); i++) &#123; JSONObject classification = classifications.getJSONObject(i); if (!classification.isNull("segment")) &#123; JSONObject segment = classification.getJSONObject("segment"); if (!segment.isNull("name")) &#123; String name = segment.getString("name"); categories.add(name); &#125; &#125; &#125; &#125; return categories;&#125; Add getItemList 1234567891011121314151617181920212223242526272829303132333435363738394041424344// Convert JSONArray to a list of item objects./** * Convert JSONArray to a list of item objects * @param events * @return A list of Item objects * @throws JSONException */private List&lt;Item&gt; getItemList(JSONArray events) throws JSONException &#123; List&lt;Item&gt; itemList = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; events.length(); ++i) &#123; JSONObject event = events.getJSONObject(i); ItemBuilder builder = new ItemBuilder(); if (!event.isNull("name")) &#123; builder.setName(event.getString("name")); &#125; if (!event.isNull("id")) &#123; builder.setItemId(event.getString("id")); &#125; if (!event.isNull("url")) &#123; builder.setUrl(event.getString("url")); &#125; if (!event.isNull("rating")) &#123; builder.setRating(event.getDouble("rating")); &#125; if (!event.isNull("distance")) &#123; builder.setDistance(event.getDouble("distance")); &#125; builder.setCategories(getCategories(event)); builder.setAddress(getAddress(event)); builder.setImageUrl(getImageUrl(event)); itemList.add(builder.build()); &#125; return itemList;&#125; Modify Search() 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/** * Search the JSONArray results through TM API * @param lat latitude * @param lon longitude * @param keyword keyword is optional * @return JSONArray */public List&lt;Item&gt; search(double lat, double lon, String keyword) &#123; List&lt;Item&gt; ret = new ArrayList&lt;Item&gt;(); if (keyword == null) keyword = DEFAULT_KEYWORD; // translate keyword into URL-supported format try &#123; keyword = java.net.URLEncoder.encode(keyword, "UTF-8"); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; // Get geoPoint String geoHash = GeoHash.encodeGeohash(lat, lon, 8); // Create query // 50 is default search radius String query = String.format("apikey=%s&amp;geoPoint=%s&amp;keyword=%s&amp;radius=%s", API_KEY, geoHash, keyword, 50); // Create URL try &#123; // create a HTTP URL connection HttpURLConnection connection = (HttpURLConnection) new URL(URL + "?" + query).openConnection(); // get the response code EG. 200/success, 404/fail int responseCode = connection.getResponseCode(); // print res System.out.println("\nSending \"GET\" request to URL : " + URL + "?" + query); System.out.println("\nResponse Code: " + responseCode); // check responseCode (Implement it later) if (responseCode != 200) &#123; &#125; // read and write the response content BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream())); String inputLine; StringBuilder response = new StringBuilder(); while ((inputLine = in.readLine()) != null) &#123; response.append(inputLine); &#125; in.close(); connection.disconnect(); // write the response to a JSON object JSONObject obj = new JSONObject(response.toString()); // check the result if (obj.isNull("_embedded")) &#123; return ret; &#125; // get the events from the whole JSON and return the events field of it as a JSON Array. JSONObject embedded = obj.getJSONObject("_embedded"); JSONArray events = embedded.getJSONArray("events"); ret = getItemList(events); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return ret;&#125; Modify doGet() in searchItem Servlet /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // TODO Auto-generated method stub double lat = Double.parseDouble(request.getParameter("lat")); double lon = Double.parseDouble(request.getParameter("lon")); String keyword = request.getParameter("term"); TicketMasterAPI tmAPI = new TicketMasterAPI(); List&lt;Item&gt; items = tmAPI.search(lat, lon, keyword); JSONArray array = new JSONArray(); try { for (Item item : items) { JSONObject obj = item.toJSONObject(); array.put(obj); } } catch (Exception e) { e.printStackTrace(); } RpcHelper.writeJSONArray(response, array); } Test result test on http://localhost:8080/Jupiter/search?lat=37.38&amp;lon=-122.08]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] CSS Basic]]></title>
    <url>%2F2019%2F04%2F11%2F%5BNotes%5D%20CSS%20Basic%2F</url>
    <content type="text"><![CDATA[CSS BasicCSS introduction CSS stands for Cascading Style Sheets describes how HTML elements (titles, images, paragraph…) are to be displayed on screen, paper, or in other media CSS version 2.1/3.0 IE9 and above browsers support CSS 3.0 CSS in HTML Usage of CSS in HTMl Inline Style 内联样式 (highest priority) &lt;h1 style=&quot;color:blue;&quot;&gt;This is a heading&lt;/h1&gt; (Not recommended) Internal Style 嵌入样式 (second priority) 1234567&lt;head&gt;&lt;style&gt;h1 &#123; color: maroon; &#125; &lt;/style&gt;&lt;/head&gt; External Style 外部样式 (lowest priority) Each page must include a reference to the external style sheet file inside the &lt;link&gt; element. The &lt;link&gt; element goes inside the &lt;head&gt; section: 123&lt;head&gt; &lt;link rel="stylesheet" type="text/css" href="mystyle.css"&gt;&lt;/head&gt; type attribute: specifies the media type of the linked document rel：specifies the relationship between the current document and the linked document href：specifies the location of the linked document Default Style 缺省样式 example 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;!-- external style --&gt; &lt;link rel="stylesheet" type="text/css" href="mystyle.css"&gt; &lt;/head&gt; &lt;!-- internal style --&gt; &lt;style&gt; h1 &#123; color: blue; &#125; &lt;/style&gt; &lt;body&gt; &lt;!-- default style --&gt; &lt;h2&gt;test0&lt;/h2&gt; &lt;h1&gt;test1&lt;/h1&gt; &lt;!-- Inline style --&gt; &lt;p style="color:brown"&gt;test2&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; Syntax Selector {Property: value; Property: value;} example h1 {color:blue;font-size:12px;} The selector points to the HTML element you want to style. The declaration block contains one or more declarations separated by semicolons. each declaration includes a CSS property name and a value, separated by a colon. always ends with a semicolon declaration blocks are surrounded by curly braces. Comment /* */ Basic properties width - 宽度， 单位px（像素） height - 高度 color - 前景色， 也就是文字的颜色 background-color - 背景色 font-size - 字体的大小 CSS Selectors * All Elements * {color:blue} /*all items set to blue*/ Element name. p {color:blue} /* all p tag turn to blue */ #id The id selector uses the id attribute of an HTML element to select a specific element. The id of an element should be unique within a page, so the id selector is used to select one unique element! To select an element with a specific id, write a hash (#) character, followed by the id of the element.12345&lt;li id=”li-ca”&gt;CA&lt;/li&gt; #li-ca &#123; color: blue;&#125; class The class selector selects elements with a specific class attribute. To select elements with a specific class, write a period (.) character, followed by the name of the class.12345.nice &#123; color: purple;&#125; &lt;p class="nice"&gt;lalala&lt;/p&gt;&lt;p class="nice"&gt;hohoho&lt;/p&gt; Combinator Combinator is a selector combined by multiple selectors. 后代选择器 div p : selects all &lt;p&gt; elements inside &lt;div&gt; elements` 1.class h3 &#123;color:red; font-size:25px;&#125; 并集选择器 div, p : selects all &lt;div&gt; elements and all &lt;p&gt; elements 1.class, h3 &#123;color:red; font-size:25px;&#125; 子元素选择器 div &gt; p : selects all &lt;p&gt; elements where the parent is a &lt;div&gt; element 1.class, h3 &#123;color:red; font-size:25px;&#125; Difference of div p and div &gt; p: div p includes all sons and grandsons, while div &gt; p has only direct sons. 12345678910111213141516171819&lt;style&gt; &lt;!-- All strong whose parent is p --&gt; p &gt; strong &#123; color: red; &#125; p &gt; span &gt; strong &#123; color: green; &#125; &lt;!-- All strong below div --&gt; div strong &#123; font-size: 50px; &#125; &lt;/style&gt; &lt;!-- ... --&gt;&lt;div&gt; &lt;p id="aa"&gt;this is &lt;span&gt;&lt;strong&gt;strong under span&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;this is paragraph 3&lt;/p&gt; &lt;p&gt;&lt;strong&gt;I am strong under p&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt; Attribute selector: Use a [] to select attributes 1234567891011121314151617181920&lt;style&gt; &lt;!-- all p with class attribute --&gt; p[class] &#123; color:red; &#125; &lt;!-- the class of p is "right --&gt; p[class="right"] &#123; color:blue; &#125; &lt;!-- class~="demo means class contains "demo"--&gt; p[class~="demo"] &#123; font-size: 60px; &#125; &lt;/style&gt; &lt;body&gt; &lt;p class="right"&gt; i am div1&lt;/p&gt; &lt;p&gt; i am div2&lt;/p&gt; &lt;p class="left demo"&gt; i am div3&lt;/p&gt; &lt;p id="side"&gt; i am div4&lt;/p&gt; &lt;/body&gt; Pseudo Classes 伪类 :link - (a:link) selects all unvisited links :hover - (a:hover) selects links on mouse over :active - (a:active) selects the active link :visited - (a:visited) selects all visited links\ :first-child - (p:first-child) selects every &lt;p&gt; element that is the first child of its parent 123456789101112131415161718&lt;style&gt; a:link &#123; color: red; &#125; a:visited &#123; color: yellow; &#125; a:hover &#123; font-size: 50px; color: blue; &#125; a:active &#123; color: green; &#125; p:first-child &#123; background-color: brown; &#125; &lt;/style&gt; Pesudo Elements ::first-element (does not work on inline elements, such as span)123456&lt;style&gt; p::first-letter &#123; font-size: 100px; color: pink; &#125; &lt;/style&gt; CSS Cascade and Inheritance CSS Cascade the cascade is a set of rules for determining which style properties get applied to an element. It specifies how a web browser should handle multiple styles that apply to the same tag and what to do when CSS properties conflict. bottom &gt; top Inheritance some property values applied to an element will be inherited by that element’s children, and some won’t. font-family and color to be inherited, as that makes it easy for you to set a site-wide base font by applying a font-family to the &lt;html&gt; element; margin, padding, border, and background-image to NOT be inherited &lt;a&gt; does not support any kind of inheritance unless: a {color: inherit;} eg. &lt;span&gt; inside a &lt;p&gt; will be overrided. Specificity First Principle Inline style &gt; Internal &gt; external &gt; inheritance &gt; default Second Principle id &gt; class/pseudo class &gt; tag &gt; inheritance &gt; default Specificity Collision CSS provides a formula for determining a style’s specificity that’s based on a value assigned to the style’s selector - a tag selector, class selector, ID selector, and so on. Here’s how the system works: A tag selector is worth 1 point. A class selector is worth 10 points. An ID selector is worth 100 points. An inline style is worth 1,000 points. The bigger the number, the greater the specificity. Example A tag style for the tag (specificity = 1) A class style named .highlight (specificity = 10) An ID style named #logo (specificity = 100) Then say your web page has this HTML: &lt;img id=”logo” class=”highlight” src=”logo.gif”/&gt;. If you define the same property - such as the border property - in all three styles, then the value from the ID style (#logo) always wins out. A pseudo-element (like ::before) is treated like a tag selector and is worth 1 point. A pseudo-class (:link) is treated like a class and is worth 10 points. Since descendant selectors are composed of several selectors - #content p, or h2 strong, for example, the math gets a bit more complicated. The specificity of a descendant selector is the total value of all of the selectors listed. A descendant selector = 1 tag + 1 tag/class If there’s still collision, last style wins !important; This is an overruling specificity, it means ‘this is important, ignore subsequent rules, and any usual specificity issues, apply this rule!’ For example:1234&lt;style&gt;.nav a &#123; color: red; &#125;a &#123; color: blue !important; &#125;&lt;/style&gt;]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>CSS</tag>
        <tag>HTML</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] TicketMaster API]]></title>
    <url>%2F2019%2F04%2F09%2F%5BNotes%5D%20TicketMaster%20API%2F</url>
    <content type="text"><![CDATA[TicketMaster APIHTML request message Request structure GET /doc/test.html HTTP 1.1First part indicates the type of the request, second part indicates the resource it asks for, third part is the version of protocal Request Header Request Body bookId=12345&amp;author=Tan+Ah+Teck Some browser will process the data here. Response structure Status line HTTP/1.1 200 OK200 indicates that the response status number, and the “OK” is the explanation of the status. Response Header Response Body &lt;h1&gt;Home page&lt;/h1&gt; RESTful API CRUD Create/Read/Update/Delete matches HTTP POST/GET/PUT/DELETE server is stateless No need to involve other requests when handling the request. TicketMaster API Request URL of discover API protocol://hostname:port/endpoint?query : protocol: https hostname: app.ticketmaster.com endpoint: /discovery/v2/events.json query: APIkey: it’s required by TicketMaster API for authn/authz GeoPoint: lat/long since our search is based on client location Radius: radius of search area Keyword: search a specific kind of events example https://app.ticketmaster.com/discovery/v2/events.json?apikey=12345&amp;geoPoint=abcd&amp;keyword=music&amp;radius=50 Headers and Body: nothing to set since it’s not required for this API. Response data we need is located in _embedded(JSON Object) -&gt; events(JSON Array) -&gt; item object(JSON Object) Implementation Create a new Package external in src Create a new class TicketMasterAPI Add some constants 123​private static final String URL = "https://app.ticketmaster.com/discovery/v2/events.json";​private static final String DEFAULT_KEYWORD = ""; // no restriction​private static final String API_KEY = "USE_YOUR_OWN_KEY"; Add a search function 123456789/*** Search the keyword through TM API* @param lat latitude* @param lon longitude* @param keyword keyword is optional*/public JSONArray search(double lat, double lon, String keyword) &#123; return null;&#125; Add queryAPI helper 12345678910111213141516/*** print the results of search(lat, lon)* @param lat latitude* @param lon longitude*/private void queryAPI(double lat, double lon) &#123; JSONArray events = search(lat, lon, null); try &#123; for (int i = 0; i &lt; events.length(); i++) &#123; JSONObject event = events.getJSONObject(i); System.out.println(event); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; Add GeoHash helper to convert lat, lon to geoPoint. Copy the code from http://developer-should-know.com/post/87283491372/geohash-encoding-and-decoding-algorithm Implement search(lat,lon,keyword) function 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/*** Search the JSONArray results through TM API* @param lat latitude* @param lon longitude* @param keyword keyword is optional* @return JSONArray*/public JSONArray search(double lat, double lon, String keyword) &#123; JSONArray ret = new JSONArray(); if (keyword == null) keyword = DEFAULT_KEYWORD; // translate keyword into URL-supported format try &#123; keyword = java.net.URLEncoder.encode(keyword, "UTF-8"); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; // Get geoPoint String geoHash = GeoHash.encodeGeohash(lat, lon, 8); // Create query // 50 is default search radius String query = String.format("apikey=%s&amp;geoPoint=%s&amp;keyword=%s&amp;radius=%s", API_KEY, geoHash, keyword, 50); // Create URL try &#123; // create a HTTP URL connection HttpURLConnection connection = (HttpURLConnection) new URL(URL + "?" + query).openConnection(); // get the response code EG. 200/success, 404/fail int responseCode = connection.getResponseCode(); // print res System.out.println("\nSending \"GET\" request to URL : " + URL + "?" + query); System.out.println("\nResponse Code: " + responseCode); // check responseCode (Implement it later) if (responseCode != 200) &#123; &#125; // read and write the response content BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream())); String inputLine; StringBuilder response = new StringBuilder(); while ((inputLine = in.readLine()) != null) &#123; response.append(inputLine); &#125; in.close(); connection.disconnect(); // write the response to a JSON object JSONObject obj = new JSONObject(response.toString()); // check the result if (obj.isNull("_embedded")) &#123; return ret; &#125; // get the events from the whole JSON and return the events field of it as a JSON Array. JSONObject embedded = obj.getJSONObject("_embedded"); JSONArray events = embedded.getJSONArray("events"); ret = events; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return ret;&#125; Create a new package entity and a new class Item(entity表示servelet储存数据的类) 123456789101112131415161718192021222324252627/*** Item of event* @author andaluo**/public class Item &#123; private String itemId; private String name; private double rating; private String address; private Set&lt;String&gt; categories; private String imageURL; private String url; private double distance; public JSONObject toJSONObject() &#123; JSONObject obj = new JSONObject(); try &#123; obj.put("item_id", itemId); obj.put("name", name); obj.put("rating", rating); // ... &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return obj; &#125; Use builder pattern to create Item class 12345678910111213141516171819202122232425262728293031323334353637383940414243 /** * A helper class to build the Item class * @author andaluo * */ public static class ItemBuilder&#123; private String itemId; private String name; // ... /** * Construct the Item using builder * @return */ public Item build() &#123; return new Item(this); &#125; /** * return the builder itself to support continuous operation. * @param itemId * @return */ public ItemBuilder setItemId(String itemId) &#123; this.itemId = itemId; return this; &#125; //... &#125; /** * Builder pattern to create a class * @param builder */ public Item(ItemBuilder builder) &#123; this.itemId = builder.itemId; this.name = builder.name; // ... // when build the item we get public static void main(String[] args) &#123;Item item = new Item.ItemBuilder().setAddress("abc").setDistance(19).build(); &#125;]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How to Reverse A Linked List]]></title>
    <url>%2F2019%2F04%2F09%2FHow%20to%20Reverse%20A%20Linked%20List%2F</url>
    <content type="text"><![CDATA[Reverse linked list corner case 12dummy-&gt;1-&gt;nulldummy-&gt;null general case 1234567891011dummy-&gt; 1 -&gt; 2 -&gt; 3 -&gt; nullpre cur nextNodedummy -&gt; 2 -&gt; 1 -&gt; 3 -&gt; nullpre nextNode cur dummy -&gt; 2 -&gt; 1 -&gt; 3 -&gt; nullpre cur nextNodedummy -&gt; 3 -&gt; 2 -&gt; 1 -&gt; nullpre cur nextNode link cur to the next node cur.next = nextNode.next link nextNode to the head of the reversed part nextNode.next = pre.next link pre to the nextNode pre.next = nextNode update nextNode to next nextNode = cur.next when nextNode gets to the end, exit cur represents the tail, and pre represents the the dummy, nextNode represents the node waiting to be added to the head of the list.]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] HTML Basic]]></title>
    <url>%2F2019%2F04%2F09%2F%5BNotes%5D%20HTML%20Basic%2F</url>
    <content type="text"><![CDATA[HTML BasicHow Internet works(High Level) ​find the right address www.google.com -&gt; 172.217.8.132 Your query is submitted to your ISP( Internet service provider) DNS(Domain Name System) takes the domain name and turns it into URI a request is sent to the server and then the server response whatever requested, in this case, it is the combination of html, css and JavaScript the browser display the website. Basic Web Technologies HTML: Structure CSS: Style JavaScript: Interaction Tags Hypertext Markup Language Tags 123456789101112131. &lt;!DOCTYPE&gt; (声明)2. &lt;html&gt;3. &lt;body&gt;4. &lt;ul&gt;5. &lt;div&gt;6. &lt;span&gt;7. &lt;a&gt;8. &lt;img&gt;9. &lt;header&gt;10. &lt;nav&gt;11. &lt;section&gt;12. &lt;aside&gt;13. &lt;footer&gt; &lt;!DOCTYPE&gt; &lt;!DOCTYPE&gt; declaration is not an HTML tag it is an instruction to the web browser about what version of HTML the page is written in and how to render the content always add the &lt;!DOCTYPE&gt; declaration to your HTML documents. html5的声明是&lt;!DOCTYPE html&gt; &lt;head&gt; provides general information (metadata) about the document,including its title and links to its scripts and style sheets. after &lt;html&gt; tag only 1 pair of &lt;head&gt; tag in a html document &lt;title&gt; can only be placed here. &lt;meta charset=&quot;UTF-8&quot;&gt; set the charSet of this page &lt;body&gt;​- represents the content of an HTML document.​- after &lt;head&gt; tag but on the same level only 1 pair of &lt;body&gt; element in a document contains: 标题标签 &lt;h1&gt; - &lt;h6&gt; 段落标签 &lt;p&gt; 注释标签 &lt;!-- comment -- &gt; 水平线标签 &lt;hr&gt;(单标签) 换行标签 &lt;br&gt;（单标签） 文本节标签 &lt;span&gt; &lt;ul&gt; Unordered list represents an unordered list of items typically rendered as a bulleted list uses with &lt;li&gt; &lt;ol&gt; ordered list &lt;li&gt; represent an item in a list. must be contained in a parent element: an ordered list &lt;ol&gt;, an unordered list &lt;ul&gt;, or a menu &lt;menu&gt;. &lt;a&gt; 超级链接 creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL. &lt;a href=&quot;https://www.google.com&quot;&gt;Google&lt;/a&gt; href attribute: contains a URL or a URL fragment that the hyperlink points to. #: link to an element with a specified id within the page (like href=”#top”) target attribute: _blank vs. _self example12&lt;a href="http://www.google.com" target="_blank"&gt;&lt;/a&gt;&lt;!-- _blank means open in new tag, _self means open in this tag---&gt; &lt;img&gt;图片标签（单标签） defines an image in an HTML page. has two required attributes: src and alt: &lt;img src=”” alt=”” &gt; has no end tag(self-closing tag). if the image is broken, then the alternative name shows up. Blocks &lt;div&gt; the generic container for flow content and does not inherently represent anything. use it to group elements for purposes. recall&lt;span&gt; a generic inline container for phrasing content. does not inherently represent anything. use it to group elements for purposes. &lt;div&gt; vs. &lt;span&gt; find all block elements and inline elements after the class &lt;p&gt; 另起一行，因此也属于块状标签 Semantic Tags A semantic element clearly describes its meaning to both the browser and the developer. 语义标签 examples of non-semantic elements: &lt;div&gt; and &lt;span&gt; - tells nothing about its content. examples of semantic elements: &lt;form&gt;, &lt;table&gt;, and &lt;article&gt; - clearly defines its content. Semantic elements &lt;header&gt; 页眉:represents a container for introductory content or a set of navigational links. &lt;section&gt; 区块:represents a standalone section of functionality contained within an HTML document, typically with a heading, which doesn’t have a more specific semantic element to represent it. &lt;aside&gt; 侧边栏:represents a section of a document with content connected tangentially to the main content of the document (often presented as a sidebar). &lt;nav&gt; 导航:represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes. &lt;footer&gt; 页脚:defines a footer for a document or section which contain information about its containing element. Project Structure structure 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="description" content="Item Recommendation"&gt; &lt;meta name="author" content="Your Name"&gt; &lt;title&gt;Item Recommendation Final&lt;/title&gt;&lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"&gt; &lt;/head&gt; &lt;body&gt; &lt;header&gt; &lt;nav&gt; &lt;a href=""&gt;Home&lt;/a&gt; &lt;a href="#name"&gt;Contact&lt;/a&gt; &lt;a href=""&gt;About&lt;/a&gt; &lt;/nav&gt; &lt;/header&gt; &lt;div&gt; &lt;header&gt; &lt;p&gt; &lt;span&gt;Item&lt;/span&gt; &lt;i id="avatar" class="avatar fa fa-user fa-2x"&gt;Icon&lt;/i&gt; &lt;br&gt; Recommendation &lt;/p&gt; &lt;/header&gt; &lt;section&gt; &lt;aside&gt; &lt;nav&gt; &lt;a href="#"&gt;Nearby&lt;/a&gt; &lt;a href="#"&gt;My Favorites&lt;/a&gt; &lt;a href="#"&gt;Recommendation&lt;/a&gt; &lt;/nav&gt; &lt;/aside&gt; &lt;ul&gt; &lt;li&gt; &lt;img src="https://s1.ticketm.net/dam/c/48b/2352e3b5-8496-496b-97a3-e605177e848b_105851_ARTIST_PAGE_3_2.jpg" /&gt; &lt;div&gt; &lt;a href="#"&gt;Item&lt;/a&gt; &lt;p&gt;Music&lt;/p&gt; &lt;/div&gt; &lt;p&gt;99 Grove Street&lt;br/&gt;San Francisco&lt;br/&gt; CA&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt; &lt;/div&gt; &lt;footer&gt; &lt;p&gt;What We Do&lt;/p&gt; &lt;p&gt;"Help you find the best place around."&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Example office, CA&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;info@example.com&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;+1 800 123 456&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/footer&gt; &lt;/body&gt; &lt;/html&gt; Use FontAwesome to get icon. Add the css to 123&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css&quot;&gt; &lt;i id=&quot;avatar&quot; class=&quot;avatar fa fa-user fa-2x&quot;&gt;&lt;/i&gt;]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] Java Servlet]]></title>
    <url>%2F2019%2F04%2F05%2F%5BNotes%5D%20Java%20Servlet%2F</url>
    <content type="text"><![CDATA[ServletREST(Representational State Transfer) REST is web server design pattern Operations are directly based on HTTP methods, so that server don’t need to parse extra thing URL clearly indicates which resource a client want, easy for client side users to understand. Server is running in stateless mode, improve scalability. Create Jupyter Project &amp;&amp; SearchItem Servlet Create Dynamic Project called “Jupiter” Add Tomcat 9.0 to its Java Build Path Add And Remove project Jupyter to existed Tomcat server Create java Servlet in Jupyter project, name it SearchItem and name the package rpc It should contain a doGet() and doPost() change the mapping url 1234// better style to set them all lowercase// 可以直接在创建servlet的页面修改@WebServlet("/SearchItem") // by default@WebServlet("/search") Handle the doGet() method by adding tutorial code 1234567891011// response.getWriter()表示得到response的输出流PrintWriter out = response.getWriter();// request.getParameter表示获取request中的body的参数信息if (request.getParameter("username") != null) &#123; String username = request.getParameter("username"); out.print("Hello " + username);&#125;// 一定要关闭这个输出流out.close(); test the input 1http://localhost:8080/Jupiter/search?username=abcd return a HTML page 123456789// 需要告诉浏览器页面的类型，渲染成所需的格式response.setContentType("text/html");PrintWriter out = response.getWriter();out.println("&lt;html&gt;&lt;body&gt;");out.println("&lt;h1&gt;This is a HTML page&lt;/h1&gt;");out.println("&lt;/body&gt;&lt;/html&gt;");out.close(); add Java-json jar support to the WebContent-WebInf-lib test json support 12345678910111213141516// 把页面设置成json键值对格式response.setContentType("application/json");PrintWriter out = response.getWriter();String username = "";if (request.getParameter("username") != null) &#123; username = request.getParameter("username");&#125;JSONObject obj = new JSONObject();try &#123; obj.put("username", username);&#125; catch (JSONException e) &#123; e.printStackTrace();&#125;out.print(obj);out.close(); test jason array 123456789101112response.setContentType("application/json");PrintWriter out = response.getWriter();//json array 存储多个键值对JSONArray array = new JSONArray();try &#123; array.put(new JSONObject().put("username", "abcd")); array.put(new JSONObject().put("username", "1234"));&#125; catch (JSONException e) &#123; e.printStackTrace();&#125;out.print(array);out.close(); Create RecommendItem Servlet Create another Servlet called RecommendItem under prc package, and change the mapping url practice on JSONArray12345678910111213141516// 1. set content typeresponse.setContentType("application/json");// 2. get output stream of responsePrintWriter out = response.getWriter();// 3. create json arrayJSONArray arr = new JSONArray();try &#123; // 4. create JSONObject and put those in the JSONArray arr.put(new JSONObject().put("name", "abcd").put("address", "san francisco").put("time","01/01/2017")); arr.put(new JSONObject().put("name", "1234").put("address", "san jose").put("time","01/02/2017"));&#125; catch (JSONException e) &#123; e.printStackTrace();&#125;// 5. print the resultout.print(arr);out.close(); Add RpcHelper utility class create regular class RpcHelper under rpc package add writeJSONObject(response, JSONObject) 123456789101112131415public static void writeJSONObject(HttpServletResponse response , JSONObject obj) &#123; try &#123; // 1. 修改content type response.setContentType("application/json"); // 2. 加入header response.addHeader response.addHeader("Access-Control-Allow-Origin", "*"); // 3. 获取输出流 PrintWriter PrintWriter out = response.getWriter(); // 4. 写入 out.print(obj); out.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; add writeJSONArray(response, JSONArray) 123456789101112131415public static void writeJSONArray(HttpServletResponse response , JSONArray array) &#123; try &#123; // 1. 修改content type response.setContentType("application/json"); // 2. 加入header response.addHeader("Access-Control-Allow-Origin", "*"); // 3. 获取输出流 PrintWriter out = response.getWriter(); // 4. 写入 out.print(array); out.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; now apply the helper to the SearchItem and RecommendationItem TicketMaster API An web based API provided by TicketMaster so that clients and get real events data from TicketMaster server. You cannot see the source code of it, but you can refer to the documentation to figure out how to use the interface to make connection by sending request to it’s backend. It’s required by TicketMaster API so that it’ll know who is using their API. To get your API key, you need to register on this website: http://developer.ticketmaster.com, and you’ll see your API key when we navigate to API details. The bottle neck of this project is TicketMaster API, since we cannot control its performance. If we have to optimize it, we can create a cache. Or we can make another API. Make a copy each time we query something from TicketMaster. If TicketMaster is down. We can query local copy of nearest geo point.模仿一个曲线拟合的过程，即模糊搜索]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Notes] Web Application Basic]]></title>
    <url>%2F2019%2F04%2F04%2F%5BNotes%5D%20Web%20Application%20Basic%2F</url>
    <content type="text"><![CDATA[Web ApplicationDependencies: Java 8 Eclipse EE Postman Tomcat Web Application: Clients -&gt;Internet-&gt; Server Server(Backend) Client(Frontend): User interface Internet TCP/IP区别： IP对应特定机器的地址，TCP对应特定机器特定进程的地址 TCP通过端口来监听请求，请求包括IP和端口号 在浏览器输入www.example.com会发生什么？ (client) client opens browser and goes to an Internet address (IP address/URL/hostname) and asks for page for (http://www.example.com), which means “I want to see ‘http://www.example.com/index.html’” (network) Internet redirects your request “I want to see ‘http://www.example.com’” to example’s server (a set of web servers) (server) One of example’s server sends a response to your Internet address (ip address). The response contains a HTML page. We will talk about HTML later. (network) The response goes through the Internet and received by your browser. (client) Your browser receives the response from example’s server and the HTML page contained in it. Render the page view and present to you. How to view the HTML page source? (Right click, and view page source) 如何设计web app? 三层结构 presentation tier 直接与用户交互 logic tier 应用具体的逻辑 data tier 数据库 Tomcat 提供web server RPC(remote procedure call) 调用一个远端机器上的API Java Servlet 服务器端负责处理RPC的java class Tomcat 存放servlet的环境，负责接受请求并分配到对应的servlet处理,把处理的结果传给正确的客户 Tomcat配置 在properties里面点一下switch location找配置文件 server location改成 use tomcat installation 地址localhost:8080 Http request methods GET(read in general) POST(write in general) PUT(write) DELETE(write) URL(Unique Resource Locator) format: 123456+ protocal(http/https)+ hostname(www.youtube.com)+ port(8080): which process+ endpoint: The name and location of the requested resource, under the server base directory. 相当于要触发的服务或功能+ query: separated from the preceding part by a question mark (?), containing a query string of attribute–value pairs separated by a delimiter. 相当于参数+ example: ```https://www.youtube.com/results?search_query=example example: 12. url会自动将空格转码成```&quot;20%&quot; 如果要inplace操作的话，先扫一遍找出空格数，然后再扩容字符串，然后冲后往前填。 http request body: 包含http request的数据 POST的body信息通常是隐藏的,GET通常没有必要隐藏 request例子 1234567891011121314151617181920212223242526JSON(JavaScript Object Notation)&#123;“instructor”: &#123; &quot;company&quot;: &quot;Laioffer&quot;, &quot;course&quot;: “Project” , &quot;name&quot;: “Vincent”&#125; &#125;// Alternative formatsXML: eXtensible Markup Language&lt;instructor&gt;&lt;company&gt;Laioffer&lt;/company&gt;&lt;course&gt;Project&lt;/course&gt;&lt;name&gt;Vincent&lt;/name&gt;&lt;/instructor&gt;ProtocolBufferInstructor &#123;company = “Laioffer”,course= “Project”name= “Vincent”&#125; JSON简洁一些，xml长一些，ProtocalBuffer更新效率更高。前两种都是字符串，后一种是java class，相当于二进制文件，需要额外支持。]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Java</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bitwise operation位运算相关]]></title>
    <url>%2F2019%2F03%2F29%2Fbitwise%20operation%2F</url>
    <content type="text"><![CDATA[1. How to check odd numbern &amp; 1 means comparing last digit of binary number to 1 12def is_odd(n): return n &amp; 1 == 1 2. Float divisionn &gt;&gt; 1 means n floor divides 2 12&gt;&gt;&gt; 5 &gt;&gt; 12]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>bit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HelloWorld]]></title>
    <url>%2F2019%2F03%2F28%2FHelloWorld%2F</url>
    <content type="text"><![CDATA[长风破浪会有时，直挂云帆济沧海！]]></content>
      <categories>
        <category>Personal</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Leetcode] 3. Longest Substring Without Repeating Characters]]></title>
    <url>%2F2019%2F03%2F28%2F3.%20Longest%20Substring%20Without%20Repeating%20Characters%2F</url>
    <content type="text"><![CDATA[meidumGiven a string, find the length of the longest substring without repeating characters. Example 1: 123Input: &quot;abcabcbb&quot;Output: 3 Explanation: The answer is &quot;abc&quot;, with the length of 3. Example 2: 123Input: &quot;bbbbb&quot;Output: 1Explanation: The answer is &quot;b&quot;, with the length of 1. Example 3: 1234Input: &quot;pwwkew&quot;Output: 3Explanation: The answer is &quot;wke&quot;, with the length of 3. Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263class Solution1: def lengthOfLongestSubstring(self, s): """ :type s: str :rtype: int """ # DFS solution O(n2) if not s: return 0 memo = set() self.max_length = float('-inf') for i in range(len(s)): if self.max_length &gt;= len(s) - i: break self.helper("", i, s, memo) return self.max_length def helper(self, path, ind, string, memo): self.max_length = max(self.max_length, len(path)) if ind &gt;= len(string): return if string[ind] not in path: path+=string[ind] # print(path) self.helper(path, ind+1, string, memo) return class Solution2: # sliding window # O(2n) time O(min(m, n)) space. m is 26, n is len of str def lengthOfLongestSubstring(self, s): if not s: return 0 i = j = 0 res = 0 memo = set() while i &lt; len(s) and j &lt; len(s): if s[j] not in memo: memo.add(s[j]) res = max(res, j - i + 1) j+=1 else: memo.remove(s[i]) i += 1 return res class Solution: # sliding window optimized using map # O(n) time O(min(m, n)) space. m is 26, n is len of str def lengthOfLongestSubstring(self, s): if not s: return 0 res = 0 i = j = 0 dic = &#123;&#125; while j &lt; len(s): if s[j] in dic: i = max(dic[s[j]], i) res = max(res, j - i + 1) dic[s[j]] = j + 1 j+=1 return res]]></content>
      <categories>
        <category>CS</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
</search>
